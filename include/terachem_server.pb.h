// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: terachem_server.proto

#ifndef PROTOBUF_terachem_5fserver_2eproto__INCLUDED
#define PROTOBUF_terachem_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace terachem_server {
class JobInput;
class JobInputDefaultTypeInternal;
extern JobInputDefaultTypeInternal _JobInput_default_instance_;
class JobOutput;
class JobOutputDefaultTypeInternal;
extern JobOutputDefaultTypeInternal _JobOutput_default_instance_;
class Mol;
class MolDefaultTypeInternal;
extern MolDefaultTypeInternal _Mol_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace terachem_server

namespace terachem_server {

namespace protobuf_terachem_5fserver_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_terachem_5fserver_2eproto

enum Mol_UnitType {
  Mol_UnitType_ANGSTROM = 0,
  Mol_UnitType_BOHR = 1,
  Mol_UnitType_Mol_UnitType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Mol_UnitType_Mol_UnitType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Mol_UnitType_IsValid(int value);
const Mol_UnitType Mol_UnitType_UnitType_MIN = Mol_UnitType_ANGSTROM;
const Mol_UnitType Mol_UnitType_UnitType_MAX = Mol_UnitType_BOHR;
const int Mol_UnitType_UnitType_ARRAYSIZE = Mol_UnitType_UnitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mol_UnitType_descriptor();
inline const ::std::string& Mol_UnitType_Name(Mol_UnitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mol_UnitType_descriptor(), value);
}
inline bool Mol_UnitType_Parse(
    const ::std::string& name, Mol_UnitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mol_UnitType>(
    Mol_UnitType_descriptor(), name, value);
}
enum JobInput_RunType {
  JobInput_RunType_ENERGY = 0,
  JobInput_RunType_GRADIENT = 1,
  JobInput_RunType_COUPLING = 14,
  JobInput_RunType_CI_VEC_OVERLAP = 19,
  JobInput_RunType_JobInput_RunType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JobInput_RunType_JobInput_RunType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JobInput_RunType_IsValid(int value);
const JobInput_RunType JobInput_RunType_RunType_MIN = JobInput_RunType_ENERGY;
const JobInput_RunType JobInput_RunType_RunType_MAX = JobInput_RunType_CI_VEC_OVERLAP;
const int JobInput_RunType_RunType_ARRAYSIZE = JobInput_RunType_RunType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JobInput_RunType_descriptor();
inline const ::std::string& JobInput_RunType_Name(JobInput_RunType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JobInput_RunType_descriptor(), value);
}
inline bool JobInput_RunType_Parse(
    const ::std::string& name, JobInput_RunType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobInput_RunType>(
    JobInput_RunType_descriptor(), name, value);
}
enum JobInput_MethodType {
  JobInput_MethodType_HF = 0,
  JobInput_MethodType_CASE = 2,
  JobInput_MethodType_SVWN1 = 3,
  JobInput_MethodType_SVWN3 = 4,
  JobInput_MethodType_SVWN5 = 5,
  JobInput_MethodType_SVWN = 5,
  JobInput_MethodType_B3LYP1 = 6,
  JobInput_MethodType_B3LYP = 6,
  JobInput_MethodType_B3LYP3 = 7,
  JobInput_MethodType_B3LYP5 = 8,
  JobInput_MethodType_BLYP = 9,
  JobInput_MethodType_BHANDHLYP = 10,
  JobInput_MethodType_PBE = 11,
  JobInput_MethodType_REVPBE = 12,
  JobInput_MethodType_PBE0 = 13,
  JobInput_MethodType_REVPBE0 = 14,
  JobInput_MethodType_WPBE = 15,
  JobInput_MethodType_WPBEH = 16,
  JobInput_MethodType_BOP = 17,
  JobInput_MethodType_MUBOP = 18,
  JobInput_MethodType_CAMB3LYP = 19,
  JobInput_MethodType_B97 = 20,
  JobInput_MethodType_WB97 = 21,
  JobInput_MethodType_WB97X = 22,
  JobInput_MethodType_JobInput_MethodType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JobInput_MethodType_JobInput_MethodType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JobInput_MethodType_IsValid(int value);
const JobInput_MethodType JobInput_MethodType_MethodType_MIN = JobInput_MethodType_HF;
const JobInput_MethodType JobInput_MethodType_MethodType_MAX = JobInput_MethodType_WB97X;
const int JobInput_MethodType_MethodType_ARRAYSIZE = JobInput_MethodType_MethodType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JobInput_MethodType_descriptor();
inline const ::std::string& JobInput_MethodType_Name(JobInput_MethodType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JobInput_MethodType_descriptor(), value);
}
inline bool JobInput_MethodType_Parse(
    const ::std::string& name, JobInput_MethodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobInput_MethodType>(
    JobInput_MethodType_descriptor(), name, value);
}
enum MessageType {
  STATUS = 0,
  MOL = 1,
  JOBINPUT = 2,
  JOBOUTPUT = 3,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = STATUS;
const MessageType MessageType_MAX = JOBOUTPUT;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:terachem_server.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  enum JobStatusCase {
    kAccepted = 2,
    kWorking = 3,
    kCompleted = 4,
    JOB_STATUS_NOT_SET = 0,
  };

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool busy = 1;
  void clear_busy();
  static const int kBusyFieldNumber = 1;
  bool busy() const;
  void set_busy(bool value);

  // bool accepted = 2;
  private:
  bool has_accepted() const;
  public:
  void clear_accepted();
  static const int kAcceptedFieldNumber = 2;
  bool accepted() const;
  void set_accepted(bool value);

  // bool working = 3;
  private:
  bool has_working() const;
  public:
  void clear_working();
  static const int kWorkingFieldNumber = 3;
  bool working() const;
  void set_working(bool value);

  // bool completed = 4;
  private:
  bool has_completed() const;
  public:
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  JobStatusCase job_status_case() const;
  // @@protoc_insertion_point(class_scope:terachem_server.Status)
 private:
  void set_has_accepted();
  void set_has_working();
  void set_has_completed();

  inline bool has_job_status() const;
  void clear_job_status();
  inline void clear_has_job_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool busy_;
  union JobStatusUnion {
    JobStatusUnion() {}
    bool accepted_;
    bool working_;
    bool completed_;
  } job_status_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_terachem_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:terachem_server.Mol) */ {
 public:
  Mol();
  virtual ~Mol();

  Mol(const Mol& from);

  inline Mol& operator=(const Mol& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mol& default_instance();

  static inline const Mol* internal_default_instance() {
    return reinterpret_cast<const Mol*>(
               &_Mol_default_instance_);
  }

  void Swap(Mol* other);

  // implements Message ----------------------------------------------

  inline Mol* New() const PROTOBUF_FINAL { return New(NULL); }

  Mol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mol& from);
  void MergeFrom(const Mol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mol_UnitType UnitType;
  static const UnitType ANGSTROM =
    Mol_UnitType_ANGSTROM;
  static const UnitType BOHR =
    Mol_UnitType_BOHR;
  static inline bool UnitType_IsValid(int value) {
    return Mol_UnitType_IsValid(value);
  }
  static const UnitType UnitType_MIN =
    Mol_UnitType_UnitType_MIN;
  static const UnitType UnitType_MAX =
    Mol_UnitType_UnitType_MAX;
  static const int UnitType_ARRAYSIZE =
    Mol_UnitType_UnitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UnitType_descriptor() {
    return Mol_UnitType_descriptor();
  }
  static inline const ::std::string& UnitType_Name(UnitType value) {
    return Mol_UnitType_Name(value);
  }
  static inline bool UnitType_Parse(const ::std::string& name,
      UnitType* value) {
    return Mol_UnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string atoms = 1;
  int atoms_size() const;
  void clear_atoms();
  static const int kAtomsFieldNumber = 1;
  const ::std::string& atoms(int index) const;
  ::std::string* mutable_atoms(int index);
  void set_atoms(int index, const ::std::string& value);
  void set_atoms(int index, const char* value);
  void set_atoms(int index, const char* value, size_t size);
  ::std::string* add_atoms();
  void add_atoms(const ::std::string& value);
  void add_atoms(const char* value);
  void add_atoms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& atoms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_atoms();

  // repeated double xyz = 2;
  int xyz_size() const;
  void clear_xyz();
  static const int kXyzFieldNumber = 2;
  double xyz(int index) const;
  void set_xyz(int index, double value);
  void add_xyz(double value);
  const ::google::protobuf::RepeatedField< double >&
      xyz() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_xyz();

  // .terachem_server.Mol.UnitType units = 3;
  void clear_units();
  static const int kUnitsFieldNumber = 3;
  ::terachem_server::Mol_UnitType units() const;
  void set_units(::terachem_server::Mol_UnitType value);

  // int32 charge = 4;
  void clear_charge();
  static const int kChargeFieldNumber = 4;
  ::google::protobuf::int32 charge() const;
  void set_charge(::google::protobuf::int32 value);

  // int32 multiplicity = 5;
  void clear_multiplicity();
  static const int kMultiplicityFieldNumber = 5;
  ::google::protobuf::int32 multiplicity() const;
  void set_multiplicity(::google::protobuf::int32 value);

  // bool closed = 6;
  void clear_closed();
  static const int kClosedFieldNumber = 6;
  bool closed() const;
  void set_closed(bool value);

  // bool restricted = 7;
  void clear_restricted();
  static const int kRestrictedFieldNumber = 7;
  bool restricted() const;
  void set_restricted(bool value);

  // @@protoc_insertion_point(class_scope:terachem_server.Mol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> atoms_;
  ::google::protobuf::RepeatedField< double > xyz_;
  mutable int _xyz_cached_byte_size_;
  int units_;
  ::google::protobuf::int32 charge_;
  ::google::protobuf::int32 multiplicity_;
  bool closed_;
  bool restricted_;
  mutable int _cached_size_;
  friend struct  protobuf_terachem_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:terachem_server.JobInput) */ {
 public:
  JobInput();
  virtual ~JobInput();

  JobInput(const JobInput& from);

  inline JobInput& operator=(const JobInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobInput& default_instance();

  static inline const JobInput* internal_default_instance() {
    return reinterpret_cast<const JobInput*>(
               &_JobInput_default_instance_);
  }

  void Swap(JobInput* other);

  // implements Message ----------------------------------------------

  inline JobInput* New() const PROTOBUF_FINAL { return New(NULL); }

  JobInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobInput& from);
  void MergeFrom(const JobInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef JobInput_RunType RunType;
  static const RunType ENERGY =
    JobInput_RunType_ENERGY;
  static const RunType GRADIENT =
    JobInput_RunType_GRADIENT;
  static const RunType COUPLING =
    JobInput_RunType_COUPLING;
  static const RunType CI_VEC_OVERLAP =
    JobInput_RunType_CI_VEC_OVERLAP;
  static inline bool RunType_IsValid(int value) {
    return JobInput_RunType_IsValid(value);
  }
  static const RunType RunType_MIN =
    JobInput_RunType_RunType_MIN;
  static const RunType RunType_MAX =
    JobInput_RunType_RunType_MAX;
  static const int RunType_ARRAYSIZE =
    JobInput_RunType_RunType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RunType_descriptor() {
    return JobInput_RunType_descriptor();
  }
  static inline const ::std::string& RunType_Name(RunType value) {
    return JobInput_RunType_Name(value);
  }
  static inline bool RunType_Parse(const ::std::string& name,
      RunType* value) {
    return JobInput_RunType_Parse(name, value);
  }

  typedef JobInput_MethodType MethodType;
  static const MethodType HF =
    JobInput_MethodType_HF;
  static const MethodType CASE =
    JobInput_MethodType_CASE;
  static const MethodType SVWN1 =
    JobInput_MethodType_SVWN1;
  static const MethodType SVWN3 =
    JobInput_MethodType_SVWN3;
  static const MethodType SVWN5 =
    JobInput_MethodType_SVWN5;
  static const MethodType SVWN =
    JobInput_MethodType_SVWN;
  static const MethodType B3LYP1 =
    JobInput_MethodType_B3LYP1;
  static const MethodType B3LYP =
    JobInput_MethodType_B3LYP;
  static const MethodType B3LYP3 =
    JobInput_MethodType_B3LYP3;
  static const MethodType B3LYP5 =
    JobInput_MethodType_B3LYP5;
  static const MethodType BLYP =
    JobInput_MethodType_BLYP;
  static const MethodType BHANDHLYP =
    JobInput_MethodType_BHANDHLYP;
  static const MethodType PBE =
    JobInput_MethodType_PBE;
  static const MethodType REVPBE =
    JobInput_MethodType_REVPBE;
  static const MethodType PBE0 =
    JobInput_MethodType_PBE0;
  static const MethodType REVPBE0 =
    JobInput_MethodType_REVPBE0;
  static const MethodType WPBE =
    JobInput_MethodType_WPBE;
  static const MethodType WPBEH =
    JobInput_MethodType_WPBEH;
  static const MethodType BOP =
    JobInput_MethodType_BOP;
  static const MethodType MUBOP =
    JobInput_MethodType_MUBOP;
  static const MethodType CAMB3LYP =
    JobInput_MethodType_CAMB3LYP;
  static const MethodType B97 =
    JobInput_MethodType_B97;
  static const MethodType WB97 =
    JobInput_MethodType_WB97;
  static const MethodType WB97X =
    JobInput_MethodType_WB97X;
  static inline bool MethodType_IsValid(int value) {
    return JobInput_MethodType_IsValid(value);
  }
  static const MethodType MethodType_MIN =
    JobInput_MethodType_MethodType_MIN;
  static const MethodType MethodType_MAX =
    JobInput_MethodType_MethodType_MAX;
  static const int MethodType_ARRAYSIZE =
    JobInput_MethodType_MethodType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MethodType_descriptor() {
    return JobInput_MethodType_descriptor();
  }
  static inline const ::std::string& MethodType_Name(MethodType value) {
    return JobInput_MethodType_Name(value);
  }
  static inline bool MethodType_Parse(const ::std::string& name,
      MethodType* value) {
    return JobInput_MethodType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string user_options = 7;
  int user_options_size() const;
  void clear_user_options();
  static const int kUserOptionsFieldNumber = 7;
  const ::std::string& user_options(int index) const;
  ::std::string* mutable_user_options(int index);
  void set_user_options(int index, const ::std::string& value);
  void set_user_options(int index, const char* value);
  void set_user_options(int index, const char* value, size_t size);
  ::std::string* add_user_options();
  void add_user_options(const ::std::string& value);
  void add_user_options(const char* value);
  void add_user_options(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_options() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_options();

  // repeated double xyz2 = 17;
  int xyz2_size() const;
  void clear_xyz2();
  static const int kXyz2FieldNumber = 17;
  double xyz2(int index) const;
  void set_xyz2(int index, double value);
  void add_xyz2(double value);
  const ::google::protobuf::RepeatedField< double >&
      xyz2() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_xyz2();

  // string basis = 4;
  void clear_basis();
  static const int kBasisFieldNumber = 4;
  const ::std::string& basis() const;
  void set_basis(const ::std::string& value);
  #if LANG_CXX11
  void set_basis(::std::string&& value);
  #endif
  void set_basis(const char* value);
  void set_basis(const char* value, size_t size);
  ::std::string* mutable_basis();
  ::std::string* release_basis();
  void set_allocated_basis(::std::string* basis);

  // string orb1afile = 8;
  void clear_orb1afile();
  static const int kOrb1AfileFieldNumber = 8;
  const ::std::string& orb1afile() const;
  void set_orb1afile(const ::std::string& value);
  #if LANG_CXX11
  void set_orb1afile(::std::string&& value);
  #endif
  void set_orb1afile(const char* value);
  void set_orb1afile(const char* value, size_t size);
  ::std::string* mutable_orb1afile();
  ::std::string* release_orb1afile();
  void set_allocated_orb1afile(::std::string* orb1afile);

  // string orb1bfile = 9;
  void clear_orb1bfile();
  static const int kOrb1BfileFieldNumber = 9;
  const ::std::string& orb1bfile() const;
  void set_orb1bfile(const ::std::string& value);
  #if LANG_CXX11
  void set_orb1bfile(::std::string&& value);
  #endif
  void set_orb1bfile(const char* value);
  void set_orb1bfile(const char* value, size_t size);
  ::std::string* mutable_orb1bfile();
  ::std::string* release_orb1bfile();
  void set_allocated_orb1bfile(::std::string* orb1bfile);

  // .terachem_server.Mol mol = 1;
  bool has_mol() const;
  void clear_mol();
  static const int kMolFieldNumber = 1;
  const ::terachem_server::Mol& mol() const;
  ::terachem_server::Mol* mutable_mol();
  ::terachem_server::Mol* release_mol();
  void set_allocated_mol(::terachem_server::Mol* mol);

  // .terachem_server.JobInput.RunType run = 2;
  void clear_run();
  static const int kRunFieldNumber = 2;
  ::terachem_server::JobInput_RunType run() const;
  void set_run(::terachem_server::JobInput_RunType value);

  // .terachem_server.JobInput.MethodType method = 3;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  ::terachem_server::JobInput_MethodType method() const;
  void set_method(::terachem_server::JobInput_MethodType value);

  // bool return_bond_order = 16;
  void clear_return_bond_order();
  static const int kReturnBondOrderFieldNumber = 16;
  bool return_bond_order() const;
  void set_return_bond_order(bool value);

  // @@protoc_insertion_point(class_scope:terachem_server.JobInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_options_;
  ::google::protobuf::RepeatedField< double > xyz2_;
  mutable int _xyz2_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr basis_;
  ::google::protobuf::internal::ArenaStringPtr orb1afile_;
  ::google::protobuf::internal::ArenaStringPtr orb1bfile_;
  ::terachem_server::Mol* mol_;
  int run_;
  int method_;
  bool return_bond_order_;
  mutable int _cached_size_;
  friend struct  protobuf_terachem_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:terachem_server.JobOutput) */ {
 public:
  JobOutput();
  virtual ~JobOutput();

  JobOutput(const JobOutput& from);

  inline JobOutput& operator=(const JobOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobOutput& default_instance();

  static inline const JobOutput* internal_default_instance() {
    return reinterpret_cast<const JobOutput*>(
               &_JobOutput_default_instance_);
  }

  void Swap(JobOutput* other);

  // implements Message ----------------------------------------------

  inline JobOutput* New() const PROTOBUF_FINAL { return New(NULL); }

  JobOutput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobOutput& from);
  void MergeFrom(const JobOutput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double energy = 2;
  int energy_size() const;
  void clear_energy();
  static const int kEnergyFieldNumber = 2;
  double energy(int index) const;
  void set_energy(int index, double value);
  void add_energy(double value);
  const ::google::protobuf::RepeatedField< double >&
      energy() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_energy();

  // repeated double gradient = 3;
  int gradient_size() const;
  void clear_gradient();
  static const int kGradientFieldNumber = 3;
  double gradient(int index) const;
  void set_gradient(int index, double value);
  void add_gradient(double value);
  const ::google::protobuf::RepeatedField< double >&
      gradient() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_gradient();

  // repeated double charges = 4;
  int charges_size() const;
  void clear_charges();
  static const int kChargesFieldNumber = 4;
  double charges(int index) const;
  void set_charges(int index, double value);
  void add_charges(double value);
  const ::google::protobuf::RepeatedField< double >&
      charges() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_charges();

  // repeated double spins = 5;
  int spins_size() const;
  void clear_spins();
  static const int kSpinsFieldNumber = 5;
  double spins(int index) const;
  void set_spins(int index, double value);
  void add_spins(double value);
  const ::google::protobuf::RepeatedField< double >&
      spins() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_spins();

  // repeated double dipoles = 6;
  int dipoles_size() const;
  void clear_dipoles();
  static const int kDipolesFieldNumber = 6;
  double dipoles(int index) const;
  void set_dipoles(int index, double value);
  void add_dipoles(double value);
  const ::google::protobuf::RepeatedField< double >&
      dipoles() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dipoles();

  // repeated double orba_energies = 25;
  int orba_energies_size() const;
  void clear_orba_energies();
  static const int kOrbaEnergiesFieldNumber = 25;
  double orba_energies(int index) const;
  void set_orba_energies(int index, double value);
  void add_orba_energies(double value);
  const ::google::protobuf::RepeatedField< double >&
      orba_energies() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orba_energies();

  // repeated double orbb_energies = 26;
  int orbb_energies_size() const;
  void clear_orbb_energies();
  static const int kOrbbEnergiesFieldNumber = 26;
  double orbb_energies(int index) const;
  void set_orbb_energies(int index, double value);
  void add_orbb_energies(double value);
  const ::google::protobuf::RepeatedField< double >&
      orbb_energies() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orbb_energies();

  // repeated double orba_occupations = 27;
  int orba_occupations_size() const;
  void clear_orba_occupations();
  static const int kOrbaOccupationsFieldNumber = 27;
  double orba_occupations(int index) const;
  void set_orba_occupations(int index, double value);
  void add_orba_occupations(double value);
  const ::google::protobuf::RepeatedField< double >&
      orba_occupations() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orba_occupations();

  // repeated double orbb_occupations = 28;
  int orbb_occupations_size() const;
  void clear_orbb_occupations();
  static const int kOrbbOccupationsFieldNumber = 28;
  double orbb_occupations(int index) const;
  void set_orbb_occupations(int index, double value);
  void add_orbb_occupations(double value);
  const ::google::protobuf::RepeatedField< double >&
      orbb_occupations() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_orbb_occupations();

  // repeated double nacme = 21;
  int nacme_size() const;
  void clear_nacme();
  static const int kNacmeFieldNumber = 21;
  double nacme(int index) const;
  void set_nacme(int index, double value);
  void add_nacme(double value);
  const ::google::protobuf::RepeatedField< double >&
      nacme() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_nacme();

  // repeated double ci_overlaps = 17;
  int ci_overlaps_size() const;
  void clear_ci_overlaps();
  static const int kCiOverlapsFieldNumber = 17;
  double ci_overlaps(int index) const;
  void set_ci_overlaps(int index, double value);
  void add_ci_overlaps(double value);
  const ::google::protobuf::RepeatedField< double >&
      ci_overlaps() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ci_overlaps();

  // repeated int32 cas_energy_states = 19;
  int cas_energy_states_size() const;
  void clear_cas_energy_states();
  static const int kCasEnergyStatesFieldNumber = 19;
  ::google::protobuf::int32 cas_energy_states(int index) const;
  void set_cas_energy_states(int index, ::google::protobuf::int32 value);
  void add_cas_energy_states(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cas_energy_states() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cas_energy_states();

  // repeated int32 cas_energy_mults = 20;
  int cas_energy_mults_size() const;
  void clear_cas_energy_mults();
  static const int kCasEnergyMultsFieldNumber = 20;
  ::google::protobuf::int32 cas_energy_mults(int index) const;
  void set_cas_energy_mults(int index, ::google::protobuf::int32 value);
  void add_cas_energy_mults(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cas_energy_mults() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cas_energy_mults();

  // repeated double cas_transition_dipole = 22;
  int cas_transition_dipole_size() const;
  void clear_cas_transition_dipole();
  static const int kCasTransitionDipoleFieldNumber = 22;
  double cas_transition_dipole(int index) const;
  void set_cas_transition_dipole(int index, double value);
  void add_cas_transition_dipole(double value);
  const ::google::protobuf::RepeatedField< double >&
      cas_transition_dipole() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cas_transition_dipole();

  // repeated double bond_order = 16;
  int bond_order_size() const;
  void clear_bond_order();
  static const int kBondOrderFieldNumber = 16;
  double bond_order(int index) const;
  void set_bond_order(int index, double value);
  void add_bond_order(double value);
  const ::google::protobuf::RepeatedField< double >&
      bond_order() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bond_order();

  // string orb1afile = 12;
  void clear_orb1afile();
  static const int kOrb1AfileFieldNumber = 12;
  const ::std::string& orb1afile() const;
  void set_orb1afile(const ::std::string& value);
  #if LANG_CXX11
  void set_orb1afile(::std::string&& value);
  #endif
  void set_orb1afile(const char* value);
  void set_orb1afile(const char* value, size_t size);
  ::std::string* mutable_orb1afile();
  ::std::string* release_orb1afile();
  void set_allocated_orb1afile(::std::string* orb1afile);

  // string orb1bfile = 13;
  void clear_orb1bfile();
  static const int kOrb1BfileFieldNumber = 13;
  const ::std::string& orb1bfile() const;
  void set_orb1bfile(const ::std::string& value);
  #if LANG_CXX11
  void set_orb1bfile(::std::string&& value);
  #endif
  void set_orb1bfile(const char* value);
  void set_orb1bfile(const char* value, size_t size);
  ::std::string* mutable_orb1bfile();
  ::std::string* release_orb1bfile();
  void set_allocated_orb1bfile(::std::string* orb1bfile);

  // string job_dir = 9;
  void clear_job_dir();
  static const int kJobDirFieldNumber = 9;
  const ::std::string& job_dir() const;
  void set_job_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_job_dir(::std::string&& value);
  #endif
  void set_job_dir(const char* value);
  void set_job_dir(const char* value, size_t size);
  ::std::string* mutable_job_dir();
  ::std::string* release_job_dir();
  void set_allocated_job_dir(::std::string* job_dir);

  // string job_scr_dir = 10;
  void clear_job_scr_dir();
  static const int kJobScrDirFieldNumber = 10;
  const ::std::string& job_scr_dir() const;
  void set_job_scr_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_job_scr_dir(::std::string&& value);
  #endif
  void set_job_scr_dir(const char* value);
  void set_job_scr_dir(const char* value, size_t size);
  ::std::string* mutable_job_scr_dir();
  ::std::string* release_job_scr_dir();
  void set_allocated_job_scr_dir(::std::string* job_scr_dir);

  // .terachem_server.Mol mol = 1;
  bool has_mol() const;
  void clear_mol();
  static const int kMolFieldNumber = 1;
  const ::terachem_server::Mol& mol() const;
  ::terachem_server::Mol* mutable_mol();
  ::terachem_server::Mol* release_mol();
  void set_allocated_mol(::terachem_server::Mol* mol);

  // int32 orb_size = 14;
  void clear_orb_size();
  static const int kOrbSizeFieldNumber = 14;
  ::google::protobuf::int32 orb_size() const;
  void set_orb_size(::google::protobuf::int32 value);

  // int32 server_job_id = 11;
  void clear_server_job_id();
  static const int kServerJobIdFieldNumber = 11;
  ::google::protobuf::int32 server_job_id() const;
  void set_server_job_id(::google::protobuf::int32 value);

  // int32 ci_overlap_size = 18;
  void clear_ci_overlap_size();
  static const int kCiOverlapSizeFieldNumber = 18;
  ::google::protobuf::int32 ci_overlap_size() const;
  void set_ci_overlap_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:terachem_server.JobOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > energy_;
  mutable int _energy_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > gradient_;
  mutable int _gradient_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > charges_;
  mutable int _charges_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > spins_;
  mutable int _spins_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > dipoles_;
  mutable int _dipoles_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > orba_energies_;
  mutable int _orba_energies_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > orbb_energies_;
  mutable int _orbb_energies_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > orba_occupations_;
  mutable int _orba_occupations_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > orbb_occupations_;
  mutable int _orbb_occupations_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > nacme_;
  mutable int _nacme_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > ci_overlaps_;
  mutable int _ci_overlaps_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cas_energy_states_;
  mutable int _cas_energy_states_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cas_energy_mults_;
  mutable int _cas_energy_mults_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > cas_transition_dipole_;
  mutable int _cas_transition_dipole_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > bond_order_;
  mutable int _bond_order_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr orb1afile_;
  ::google::protobuf::internal::ArenaStringPtr orb1bfile_;
  ::google::protobuf::internal::ArenaStringPtr job_dir_;
  ::google::protobuf::internal::ArenaStringPtr job_scr_dir_;
  ::terachem_server::Mol* mol_;
  ::google::protobuf::int32 orb_size_;
  ::google::protobuf::int32 server_job_id_;
  ::google::protobuf::int32 ci_overlap_size_;
  mutable int _cached_size_;
  friend struct  protobuf_terachem_5fserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// bool busy = 1;
inline void Status::clear_busy() {
  busy_ = false;
}
inline bool Status::busy() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.busy)
  return busy_;
}
inline void Status::set_busy(bool value) {
  
  busy_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.busy)
}

// bool accepted = 2;
inline bool Status::has_accepted() const {
  return job_status_case() == kAccepted;
}
inline void Status::set_has_accepted() {
  _oneof_case_[0] = kAccepted;
}
inline void Status::clear_accepted() {
  if (has_accepted()) {
    job_status_.accepted_ = false;
    clear_has_job_status();
  }
}
inline bool Status::accepted() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.accepted)
  if (has_accepted()) {
    return job_status_.accepted_;
  }
  return false;
}
inline void Status::set_accepted(bool value) {
  if (!has_accepted()) {
    clear_job_status();
    set_has_accepted();
  }
  job_status_.accepted_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.accepted)
}

// bool working = 3;
inline bool Status::has_working() const {
  return job_status_case() == kWorking;
}
inline void Status::set_has_working() {
  _oneof_case_[0] = kWorking;
}
inline void Status::clear_working() {
  if (has_working()) {
    job_status_.working_ = false;
    clear_has_job_status();
  }
}
inline bool Status::working() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.working)
  if (has_working()) {
    return job_status_.working_;
  }
  return false;
}
inline void Status::set_working(bool value) {
  if (!has_working()) {
    clear_job_status();
    set_has_working();
  }
  job_status_.working_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.working)
}

// bool completed = 4;
inline bool Status::has_completed() const {
  return job_status_case() == kCompleted;
}
inline void Status::set_has_completed() {
  _oneof_case_[0] = kCompleted;
}
inline void Status::clear_completed() {
  if (has_completed()) {
    job_status_.completed_ = false;
    clear_has_job_status();
  }
}
inline bool Status::completed() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.completed)
  if (has_completed()) {
    return job_status_.completed_;
  }
  return false;
}
inline void Status::set_completed(bool value) {
  if (!has_completed()) {
    clear_job_status();
    set_has_completed();
  }
  job_status_.completed_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.completed)
}

inline bool Status::has_job_status() const {
  return job_status_case() != JOB_STATUS_NOT_SET;
}
inline void Status::clear_has_job_status() {
  _oneof_case_[0] = JOB_STATUS_NOT_SET;
}
inline Status::JobStatusCase Status::job_status_case() const {
  return Status::JobStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mol

// repeated string atoms = 1;
inline int Mol::atoms_size() const {
  return atoms_.size();
}
inline void Mol::clear_atoms() {
  atoms_.Clear();
}
inline const ::std::string& Mol::atoms(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.atoms)
  return atoms_.Get(index);
}
inline ::std::string* Mol::mutable_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:terachem_server.Mol.atoms)
  return atoms_.Mutable(index);
}
inline void Mol::set_atoms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:terachem_server.Mol.atoms)
  atoms_.Mutable(index)->assign(value);
}
inline void Mol::set_atoms(int index, const char* value) {
  atoms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:terachem_server.Mol.atoms)
}
inline void Mol::set_atoms(int index, const char* value, size_t size) {
  atoms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:terachem_server.Mol.atoms)
}
inline ::std::string* Mol::add_atoms() {
  // @@protoc_insertion_point(field_add_mutable:terachem_server.Mol.atoms)
  return atoms_.Add();
}
inline void Mol::add_atoms(const ::std::string& value) {
  atoms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:terachem_server.Mol.atoms)
}
inline void Mol::add_atoms(const char* value) {
  atoms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:terachem_server.Mol.atoms)
}
inline void Mol::add_atoms(const char* value, size_t size) {
  atoms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:terachem_server.Mol.atoms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mol::atoms() const {
  // @@protoc_insertion_point(field_list:terachem_server.Mol.atoms)
  return atoms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mol::mutable_atoms() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.Mol.atoms)
  return &atoms_;
}

// repeated double xyz = 2;
inline int Mol::xyz_size() const {
  return xyz_.size();
}
inline void Mol::clear_xyz() {
  xyz_.Clear();
}
inline double Mol::xyz(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.xyz)
  return xyz_.Get(index);
}
inline void Mol::set_xyz(int index, double value) {
  xyz_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.Mol.xyz)
}
inline void Mol::add_xyz(double value) {
  xyz_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.Mol.xyz)
}
inline const ::google::protobuf::RepeatedField< double >&
Mol::xyz() const {
  // @@protoc_insertion_point(field_list:terachem_server.Mol.xyz)
  return xyz_;
}
inline ::google::protobuf::RepeatedField< double >*
Mol::mutable_xyz() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.Mol.xyz)
  return &xyz_;
}

// .terachem_server.Mol.UnitType units = 3;
inline void Mol::clear_units() {
  units_ = 0;
}
inline ::terachem_server::Mol_UnitType Mol::units() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.units)
  return static_cast< ::terachem_server::Mol_UnitType >(units_);
}
inline void Mol::set_units(::terachem_server::Mol_UnitType value) {
  
  units_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.units)
}

// int32 charge = 4;
inline void Mol::clear_charge() {
  charge_ = 0;
}
inline ::google::protobuf::int32 Mol::charge() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.charge)
  return charge_;
}
inline void Mol::set_charge(::google::protobuf::int32 value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.charge)
}

// int32 multiplicity = 5;
inline void Mol::clear_multiplicity() {
  multiplicity_ = 0;
}
inline ::google::protobuf::int32 Mol::multiplicity() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.multiplicity)
  return multiplicity_;
}
inline void Mol::set_multiplicity(::google::protobuf::int32 value) {
  
  multiplicity_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.multiplicity)
}

// bool closed = 6;
inline void Mol::clear_closed() {
  closed_ = false;
}
inline bool Mol::closed() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.closed)
  return closed_;
}
inline void Mol::set_closed(bool value) {
  
  closed_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.closed)
}

// bool restricted = 7;
inline void Mol::clear_restricted() {
  restricted_ = false;
}
inline bool Mol::restricted() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.restricted)
  return restricted_;
}
inline void Mol::set_restricted(bool value) {
  
  restricted_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.restricted)
}

// -------------------------------------------------------------------

// JobInput

// .terachem_server.Mol mol = 1;
inline bool JobInput::has_mol() const {
  return this != internal_default_instance() && mol_ != NULL;
}
inline void JobInput::clear_mol() {
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) delete mol_;
  mol_ = NULL;
}
inline const ::terachem_server::Mol& JobInput::mol() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.mol)
  return mol_ != NULL ? *mol_
                         : *::terachem_server::Mol::internal_default_instance();
}
inline ::terachem_server::Mol* JobInput::mutable_mol() {
  
  if (mol_ == NULL) {
    mol_ = new ::terachem_server::Mol;
  }
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.mol)
  return mol_;
}
inline ::terachem_server::Mol* JobInput::release_mol() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.mol)
  
  ::terachem_server::Mol* temp = mol_;
  mol_ = NULL;
  return temp;
}
inline void JobInput::set_allocated_mol(::terachem_server::Mol* mol) {
  delete mol_;
  mol_ = mol;
  if (mol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.mol)
}

// .terachem_server.JobInput.RunType run = 2;
inline void JobInput::clear_run() {
  run_ = 0;
}
inline ::terachem_server::JobInput_RunType JobInput::run() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.run)
  return static_cast< ::terachem_server::JobInput_RunType >(run_);
}
inline void JobInput::set_run(::terachem_server::JobInput_RunType value) {
  
  run_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.run)
}

// .terachem_server.JobInput.MethodType method = 3;
inline void JobInput::clear_method() {
  method_ = 0;
}
inline ::terachem_server::JobInput_MethodType JobInput::method() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.method)
  return static_cast< ::terachem_server::JobInput_MethodType >(method_);
}
inline void JobInput::set_method(::terachem_server::JobInput_MethodType value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.method)
}

// string basis = 4;
inline void JobInput::clear_basis() {
  basis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobInput::basis() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.basis)
  return basis_.GetNoArena();
}
inline void JobInput::set_basis(const ::std::string& value) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.basis)
}
#if LANG_CXX11
inline void JobInput::set_basis(::std::string&& value) {
  
  basis_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.basis)
}
#endif
inline void JobInput::set_basis(const char* value) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.basis)
}
inline void JobInput::set_basis(const char* value, size_t size) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.basis)
}
inline ::std::string* JobInput::mutable_basis() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.basis)
  return basis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInput::release_basis() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.basis)
  
  return basis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInput::set_allocated_basis(::std::string* basis) {
  if (basis != NULL) {
    
  } else {
    
  }
  basis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basis);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.basis)
}

// string orb1afile = 8;
inline void JobInput::clear_orb1afile() {
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobInput::orb1afile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.orb1afile)
  return orb1afile_.GetNoArena();
}
inline void JobInput::set_orb1afile(const ::std::string& value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.orb1afile)
}
#if LANG_CXX11
inline void JobInput::set_orb1afile(::std::string&& value) {
  
  orb1afile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.orb1afile)
}
#endif
inline void JobInput::set_orb1afile(const char* value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.orb1afile)
}
inline void JobInput::set_orb1afile(const char* value, size_t size) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.orb1afile)
}
inline ::std::string* JobInput::mutable_orb1afile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.orb1afile)
  return orb1afile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInput::release_orb1afile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.orb1afile)
  
  return orb1afile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInput::set_allocated_orb1afile(::std::string* orb1afile) {
  if (orb1afile != NULL) {
    
  } else {
    
  }
  orb1afile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1afile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.orb1afile)
}

// string orb1bfile = 9;
inline void JobInput::clear_orb1bfile() {
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobInput::orb1bfile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.orb1bfile)
  return orb1bfile_.GetNoArena();
}
inline void JobInput::set_orb1bfile(const ::std::string& value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.orb1bfile)
}
#if LANG_CXX11
inline void JobInput::set_orb1bfile(::std::string&& value) {
  
  orb1bfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.orb1bfile)
}
#endif
inline void JobInput::set_orb1bfile(const char* value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.orb1bfile)
}
inline void JobInput::set_orb1bfile(const char* value, size_t size) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.orb1bfile)
}
inline ::std::string* JobInput::mutable_orb1bfile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.orb1bfile)
  return orb1bfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInput::release_orb1bfile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.orb1bfile)
  
  return orb1bfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInput::set_allocated_orb1bfile(::std::string* orb1bfile) {
  if (orb1bfile != NULL) {
    
  } else {
    
  }
  orb1bfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1bfile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.orb1bfile)
}

// repeated string user_options = 7;
inline int JobInput::user_options_size() const {
  return user_options_.size();
}
inline void JobInput::clear_user_options() {
  user_options_.Clear();
}
inline const ::std::string& JobInput::user_options(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.user_options)
  return user_options_.Get(index);
}
inline ::std::string* JobInput::mutable_user_options(int index) {
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.user_options)
  return user_options_.Mutable(index);
}
inline void JobInput::set_user_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.user_options)
  user_options_.Mutable(index)->assign(value);
}
inline void JobInput::set_user_options(int index, const char* value) {
  user_options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.user_options)
}
inline void JobInput::set_user_options(int index, const char* value, size_t size) {
  user_options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.user_options)
}
inline ::std::string* JobInput::add_user_options() {
  // @@protoc_insertion_point(field_add_mutable:terachem_server.JobInput.user_options)
  return user_options_.Add();
}
inline void JobInput::add_user_options(const ::std::string& value) {
  user_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobInput.user_options)
}
inline void JobInput::add_user_options(const char* value) {
  user_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:terachem_server.JobInput.user_options)
}
inline void JobInput::add_user_options(const char* value, size_t size) {
  user_options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:terachem_server.JobInput.user_options)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobInput::user_options() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobInput.user_options)
  return user_options_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobInput::mutable_user_options() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobInput.user_options)
  return &user_options_;
}

// repeated double xyz2 = 17;
inline int JobInput::xyz2_size() const {
  return xyz2_.size();
}
inline void JobInput::clear_xyz2() {
  xyz2_.Clear();
}
inline double JobInput::xyz2(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.xyz2)
  return xyz2_.Get(index);
}
inline void JobInput::set_xyz2(int index, double value) {
  xyz2_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.xyz2)
}
inline void JobInput::add_xyz2(double value) {
  xyz2_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobInput.xyz2)
}
inline const ::google::protobuf::RepeatedField< double >&
JobInput::xyz2() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobInput.xyz2)
  return xyz2_;
}
inline ::google::protobuf::RepeatedField< double >*
JobInput::mutable_xyz2() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobInput.xyz2)
  return &xyz2_;
}

// bool return_bond_order = 16;
inline void JobInput::clear_return_bond_order() {
  return_bond_order_ = false;
}
inline bool JobInput::return_bond_order() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.return_bond_order)
  return return_bond_order_;
}
inline void JobInput::set_return_bond_order(bool value) {
  
  return_bond_order_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.return_bond_order)
}

// -------------------------------------------------------------------

// JobOutput

// .terachem_server.Mol mol = 1;
inline bool JobOutput::has_mol() const {
  return this != internal_default_instance() && mol_ != NULL;
}
inline void JobOutput::clear_mol() {
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) delete mol_;
  mol_ = NULL;
}
inline const ::terachem_server::Mol& JobOutput::mol() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.mol)
  return mol_ != NULL ? *mol_
                         : *::terachem_server::Mol::internal_default_instance();
}
inline ::terachem_server::Mol* JobOutput::mutable_mol() {
  
  if (mol_ == NULL) {
    mol_ = new ::terachem_server::Mol;
  }
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.mol)
  return mol_;
}
inline ::terachem_server::Mol* JobOutput::release_mol() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.mol)
  
  ::terachem_server::Mol* temp = mol_;
  mol_ = NULL;
  return temp;
}
inline void JobOutput::set_allocated_mol(::terachem_server::Mol* mol) {
  delete mol_;
  mol_ = mol;
  if (mol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.mol)
}

// repeated double energy = 2;
inline int JobOutput::energy_size() const {
  return energy_.size();
}
inline void JobOutput::clear_energy() {
  energy_.Clear();
}
inline double JobOutput::energy(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.energy)
  return energy_.Get(index);
}
inline void JobOutput::set_energy(int index, double value) {
  energy_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.energy)
}
inline void JobOutput::add_energy(double value) {
  energy_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.energy)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::energy() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.energy)
  return energy_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_energy() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.energy)
  return &energy_;
}

// repeated double gradient = 3;
inline int JobOutput::gradient_size() const {
  return gradient_.size();
}
inline void JobOutput::clear_gradient() {
  gradient_.Clear();
}
inline double JobOutput::gradient(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.gradient)
  return gradient_.Get(index);
}
inline void JobOutput::set_gradient(int index, double value) {
  gradient_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.gradient)
}
inline void JobOutput::add_gradient(double value) {
  gradient_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.gradient)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::gradient() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.gradient)
  return gradient_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_gradient() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.gradient)
  return &gradient_;
}

// repeated double charges = 4;
inline int JobOutput::charges_size() const {
  return charges_.size();
}
inline void JobOutput::clear_charges() {
  charges_.Clear();
}
inline double JobOutput::charges(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.charges)
  return charges_.Get(index);
}
inline void JobOutput::set_charges(int index, double value) {
  charges_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.charges)
}
inline void JobOutput::add_charges(double value) {
  charges_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.charges)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::charges() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.charges)
  return charges_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_charges() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.charges)
  return &charges_;
}

// repeated double spins = 5;
inline int JobOutput::spins_size() const {
  return spins_.size();
}
inline void JobOutput::clear_spins() {
  spins_.Clear();
}
inline double JobOutput::spins(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.spins)
  return spins_.Get(index);
}
inline void JobOutput::set_spins(int index, double value) {
  spins_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.spins)
}
inline void JobOutput::add_spins(double value) {
  spins_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.spins)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::spins() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.spins)
  return spins_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_spins() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.spins)
  return &spins_;
}

// repeated double dipoles = 6;
inline int JobOutput::dipoles_size() const {
  return dipoles_.size();
}
inline void JobOutput::clear_dipoles() {
  dipoles_.Clear();
}
inline double JobOutput::dipoles(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.dipoles)
  return dipoles_.Get(index);
}
inline void JobOutput::set_dipoles(int index, double value) {
  dipoles_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.dipoles)
}
inline void JobOutput::add_dipoles(double value) {
  dipoles_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.dipoles)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::dipoles() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.dipoles)
  return dipoles_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_dipoles() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.dipoles)
  return &dipoles_;
}

// string orb1afile = 12;
inline void JobOutput::clear_orb1afile() {
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobOutput::orb1afile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb1afile)
  return orb1afile_.GetNoArena();
}
inline void JobOutput::set_orb1afile(const ::std::string& value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb1afile)
}
#if LANG_CXX11
inline void JobOutput::set_orb1afile(::std::string&& value) {
  
  orb1afile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.orb1afile)
}
#endif
inline void JobOutput::set_orb1afile(const char* value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.orb1afile)
}
inline void JobOutput::set_orb1afile(const char* value, size_t size) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.orb1afile)
}
inline ::std::string* JobOutput::mutable_orb1afile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.orb1afile)
  return orb1afile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobOutput::release_orb1afile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.orb1afile)
  
  return orb1afile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobOutput::set_allocated_orb1afile(::std::string* orb1afile) {
  if (orb1afile != NULL) {
    
  } else {
    
  }
  orb1afile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1afile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.orb1afile)
}

// string orb1bfile = 13;
inline void JobOutput::clear_orb1bfile() {
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobOutput::orb1bfile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb1bfile)
  return orb1bfile_.GetNoArena();
}
inline void JobOutput::set_orb1bfile(const ::std::string& value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb1bfile)
}
#if LANG_CXX11
inline void JobOutput::set_orb1bfile(::std::string&& value) {
  
  orb1bfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.orb1bfile)
}
#endif
inline void JobOutput::set_orb1bfile(const char* value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.orb1bfile)
}
inline void JobOutput::set_orb1bfile(const char* value, size_t size) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.orb1bfile)
}
inline ::std::string* JobOutput::mutable_orb1bfile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.orb1bfile)
  return orb1bfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobOutput::release_orb1bfile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.orb1bfile)
  
  return orb1bfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobOutput::set_allocated_orb1bfile(::std::string* orb1bfile) {
  if (orb1bfile != NULL) {
    
  } else {
    
  }
  orb1bfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1bfile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.orb1bfile)
}

// int32 orb_size = 14;
inline void JobOutput::clear_orb_size() {
  orb_size_ = 0;
}
inline ::google::protobuf::int32 JobOutput::orb_size() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb_size)
  return orb_size_;
}
inline void JobOutput::set_orb_size(::google::protobuf::int32 value) {
  
  orb_size_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb_size)
}

// repeated double orba_energies = 25;
inline int JobOutput::orba_energies_size() const {
  return orba_energies_.size();
}
inline void JobOutput::clear_orba_energies() {
  orba_energies_.Clear();
}
inline double JobOutput::orba_energies(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orba_energies)
  return orba_energies_.Get(index);
}
inline void JobOutput::set_orba_energies(int index, double value) {
  orba_energies_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orba_energies)
}
inline void JobOutput::add_orba_energies(double value) {
  orba_energies_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orba_energies)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::orba_energies() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orba_energies)
  return orba_energies_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orba_energies() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orba_energies)
  return &orba_energies_;
}

// repeated double orbb_energies = 26;
inline int JobOutput::orbb_energies_size() const {
  return orbb_energies_.size();
}
inline void JobOutput::clear_orbb_energies() {
  orbb_energies_.Clear();
}
inline double JobOutput::orbb_energies(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orbb_energies)
  return orbb_energies_.Get(index);
}
inline void JobOutput::set_orbb_energies(int index, double value) {
  orbb_energies_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orbb_energies)
}
inline void JobOutput::add_orbb_energies(double value) {
  orbb_energies_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orbb_energies)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::orbb_energies() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orbb_energies)
  return orbb_energies_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orbb_energies() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orbb_energies)
  return &orbb_energies_;
}

// repeated double orba_occupations = 27;
inline int JobOutput::orba_occupations_size() const {
  return orba_occupations_.size();
}
inline void JobOutput::clear_orba_occupations() {
  orba_occupations_.Clear();
}
inline double JobOutput::orba_occupations(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orba_occupations)
  return orba_occupations_.Get(index);
}
inline void JobOutput::set_orba_occupations(int index, double value) {
  orba_occupations_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orba_occupations)
}
inline void JobOutput::add_orba_occupations(double value) {
  orba_occupations_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orba_occupations)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::orba_occupations() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orba_occupations)
  return orba_occupations_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orba_occupations() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orba_occupations)
  return &orba_occupations_;
}

// repeated double orbb_occupations = 28;
inline int JobOutput::orbb_occupations_size() const {
  return orbb_occupations_.size();
}
inline void JobOutput::clear_orbb_occupations() {
  orbb_occupations_.Clear();
}
inline double JobOutput::orbb_occupations(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orbb_occupations)
  return orbb_occupations_.Get(index);
}
inline void JobOutput::set_orbb_occupations(int index, double value) {
  orbb_occupations_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orbb_occupations)
}
inline void JobOutput::add_orbb_occupations(double value) {
  orbb_occupations_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orbb_occupations)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::orbb_occupations() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orbb_occupations)
  return orbb_occupations_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orbb_occupations() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orbb_occupations)
  return &orbb_occupations_;
}

// string job_dir = 9;
inline void JobOutput::clear_job_dir() {
  job_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobOutput::job_dir() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.job_dir)
  return job_dir_.GetNoArena();
}
inline void JobOutput::set_job_dir(const ::std::string& value) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.job_dir)
}
#if LANG_CXX11
inline void JobOutput::set_job_dir(::std::string&& value) {
  
  job_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.job_dir)
}
#endif
inline void JobOutput::set_job_dir(const char* value) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.job_dir)
}
inline void JobOutput::set_job_dir(const char* value, size_t size) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.job_dir)
}
inline ::std::string* JobOutput::mutable_job_dir() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.job_dir)
  return job_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobOutput::release_job_dir() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.job_dir)
  
  return job_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobOutput::set_allocated_job_dir(::std::string* job_dir) {
  if (job_dir != NULL) {
    
  } else {
    
  }
  job_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_dir);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.job_dir)
}

// string job_scr_dir = 10;
inline void JobOutput::clear_job_scr_dir() {
  job_scr_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobOutput::job_scr_dir() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.job_scr_dir)
  return job_scr_dir_.GetNoArena();
}
inline void JobOutput::set_job_scr_dir(const ::std::string& value) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.job_scr_dir)
}
#if LANG_CXX11
inline void JobOutput::set_job_scr_dir(::std::string&& value) {
  
  job_scr_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.job_scr_dir)
}
#endif
inline void JobOutput::set_job_scr_dir(const char* value) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.job_scr_dir)
}
inline void JobOutput::set_job_scr_dir(const char* value, size_t size) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.job_scr_dir)
}
inline ::std::string* JobOutput::mutable_job_scr_dir() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.job_scr_dir)
  return job_scr_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobOutput::release_job_scr_dir() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.job_scr_dir)
  
  return job_scr_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobOutput::set_allocated_job_scr_dir(::std::string* job_scr_dir) {
  if (job_scr_dir != NULL) {
    
  } else {
    
  }
  job_scr_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_scr_dir);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.job_scr_dir)
}

// int32 server_job_id = 11;
inline void JobOutput::clear_server_job_id() {
  server_job_id_ = 0;
}
inline ::google::protobuf::int32 JobOutput::server_job_id() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.server_job_id)
  return server_job_id_;
}
inline void JobOutput::set_server_job_id(::google::protobuf::int32 value) {
  
  server_job_id_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.server_job_id)
}

// repeated double nacme = 21;
inline int JobOutput::nacme_size() const {
  return nacme_.size();
}
inline void JobOutput::clear_nacme() {
  nacme_.Clear();
}
inline double JobOutput::nacme(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.nacme)
  return nacme_.Get(index);
}
inline void JobOutput::set_nacme(int index, double value) {
  nacme_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.nacme)
}
inline void JobOutput::add_nacme(double value) {
  nacme_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.nacme)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::nacme() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.nacme)
  return nacme_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_nacme() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.nacme)
  return &nacme_;
}

// repeated double ci_overlaps = 17;
inline int JobOutput::ci_overlaps_size() const {
  return ci_overlaps_.size();
}
inline void JobOutput::clear_ci_overlaps() {
  ci_overlaps_.Clear();
}
inline double JobOutput::ci_overlaps(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.ci_overlaps)
  return ci_overlaps_.Get(index);
}
inline void JobOutput::set_ci_overlaps(int index, double value) {
  ci_overlaps_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.ci_overlaps)
}
inline void JobOutput::add_ci_overlaps(double value) {
  ci_overlaps_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.ci_overlaps)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::ci_overlaps() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.ci_overlaps)
  return ci_overlaps_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_ci_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.ci_overlaps)
  return &ci_overlaps_;
}

// int32 ci_overlap_size = 18;
inline void JobOutput::clear_ci_overlap_size() {
  ci_overlap_size_ = 0;
}
inline ::google::protobuf::int32 JobOutput::ci_overlap_size() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.ci_overlap_size)
  return ci_overlap_size_;
}
inline void JobOutput::set_ci_overlap_size(::google::protobuf::int32 value) {
  
  ci_overlap_size_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.ci_overlap_size)
}

// repeated int32 cas_energy_states = 19;
inline int JobOutput::cas_energy_states_size() const {
  return cas_energy_states_.size();
}
inline void JobOutput::clear_cas_energy_states() {
  cas_energy_states_.Clear();
}
inline ::google::protobuf::int32 JobOutput::cas_energy_states(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_energy_states)
  return cas_energy_states_.Get(index);
}
inline void JobOutput::set_cas_energy_states(int index, ::google::protobuf::int32 value) {
  cas_energy_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_energy_states)
}
inline void JobOutput::add_cas_energy_states(::google::protobuf::int32 value) {
  cas_energy_states_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_energy_states)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JobOutput::cas_energy_states() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_energy_states)
  return cas_energy_states_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JobOutput::mutable_cas_energy_states() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_energy_states)
  return &cas_energy_states_;
}

// repeated int32 cas_energy_mults = 20;
inline int JobOutput::cas_energy_mults_size() const {
  return cas_energy_mults_.size();
}
inline void JobOutput::clear_cas_energy_mults() {
  cas_energy_mults_.Clear();
}
inline ::google::protobuf::int32 JobOutput::cas_energy_mults(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_energy_mults)
  return cas_energy_mults_.Get(index);
}
inline void JobOutput::set_cas_energy_mults(int index, ::google::protobuf::int32 value) {
  cas_energy_mults_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_energy_mults)
}
inline void JobOutput::add_cas_energy_mults(::google::protobuf::int32 value) {
  cas_energy_mults_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_energy_mults)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JobOutput::cas_energy_mults() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_energy_mults)
  return cas_energy_mults_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JobOutput::mutable_cas_energy_mults() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_energy_mults)
  return &cas_energy_mults_;
}

// repeated double cas_transition_dipole = 22;
inline int JobOutput::cas_transition_dipole_size() const {
  return cas_transition_dipole_.size();
}
inline void JobOutput::clear_cas_transition_dipole() {
  cas_transition_dipole_.Clear();
}
inline double JobOutput::cas_transition_dipole(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_transition_dipole)
  return cas_transition_dipole_.Get(index);
}
inline void JobOutput::set_cas_transition_dipole(int index, double value) {
  cas_transition_dipole_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_transition_dipole)
}
inline void JobOutput::add_cas_transition_dipole(double value) {
  cas_transition_dipole_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_transition_dipole)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::cas_transition_dipole() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_transition_dipole)
  return cas_transition_dipole_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_cas_transition_dipole() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_transition_dipole)
  return &cas_transition_dipole_;
}

// repeated double bond_order = 16;
inline int JobOutput::bond_order_size() const {
  return bond_order_.size();
}
inline void JobOutput::clear_bond_order() {
  bond_order_.Clear();
}
inline double JobOutput::bond_order(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.bond_order)
  return bond_order_.Get(index);
}
inline void JobOutput::set_bond_order(int index, double value) {
  bond_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.bond_order)
}
inline void JobOutput::add_bond_order(double value) {
  bond_order_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.bond_order)
}
inline const ::google::protobuf::RepeatedField< double >&
JobOutput::bond_order() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.bond_order)
  return bond_order_;
}
inline ::google::protobuf::RepeatedField< double >*
JobOutput::mutable_bond_order() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.bond_order)
  return &bond_order_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace terachem_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::terachem_server::Mol_UnitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::terachem_server::Mol_UnitType>() {
  return ::terachem_server::Mol_UnitType_descriptor();
}
template <> struct is_proto_enum< ::terachem_server::JobInput_RunType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::terachem_server::JobInput_RunType>() {
  return ::terachem_server::JobInput_RunType_descriptor();
}
template <> struct is_proto_enum< ::terachem_server::JobInput_MethodType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::terachem_server::JobInput_MethodType>() {
  return ::terachem_server::JobInput_MethodType_descriptor();
}
template <> struct is_proto_enum< ::terachem_server::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::terachem_server::MessageType>() {
  return ::terachem_server::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_terachem_5fserver_2eproto__INCLUDED
