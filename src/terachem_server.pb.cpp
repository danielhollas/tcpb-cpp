// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: terachem_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "terachem_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace terachem_server {
class StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Status> {
  public:
  bool accepted_;
  bool working_;
  bool completed_;
} _Status_default_instance_;
class MolDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mol> {
} _Mol_default_instance_;
class JobInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobInput> {
} _JobInput_default_instance_;
class JobOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobOutput> {
} _JobOutput_default_instance_;

namespace protobuf_terachem_5fserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, busy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Status_default_instance_), accepted_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Status_default_instance_), working_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Status_default_instance_), completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, job_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, atoms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, xyz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, multiplicity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, closed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mol, restricted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, mol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, run_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, basis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, orb1afile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, orb1bfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, user_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, xyz2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInput, return_bond_order_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, mol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, gradient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, charges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, spins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, dipoles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orb1afile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orb1bfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orb_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orba_energies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orbb_energies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orba_occupations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, orbb_occupations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, job_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, job_scr_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, server_job_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, nacme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, ci_overlaps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, ci_overlap_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, cas_energy_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, cas_energy_mults_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, cas_transition_dipole_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOutput, bond_order_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Status)},
  { 9, -1, sizeof(Mol)},
  { 20, -1, sizeof(JobInput)},
  { 33, -1, sizeof(JobOutput)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobOutput_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "terachem_server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Status_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Mol_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _JobInput_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _JobOutput_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Status_default_instance_.DefaultConstruct();
  _Mol_default_instance_.DefaultConstruct();
  _JobInput_default_instance_.DefaultConstruct();
  _JobOutput_default_instance_.DefaultConstruct();
  _Status_default_instance_.accepted_ = false;
  _Status_default_instance_.working_ = false;
  _Status_default_instance_.completed_ = false;
  _JobInput_default_instance_.get_mutable()->mol_ = const_cast< ::terachem_server::Mol*>(
      ::terachem_server::Mol::internal_default_instance());
  _JobOutput_default_instance_.get_mutable()->mol_ = const_cast< ::terachem_server::Mol*>(
      ::terachem_server::Mol::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025terachem_server.proto\022\017terachem_server"
      "\"`\n\006Status\022\014\n\004busy\030\001 \001(\010\022\022\n\010accepted\030\002 \001"
      "(\010H\000\022\021\n\007working\030\003 \001(\010H\000\022\023\n\tcompleted\030\004 \001"
      "(\010H\000B\014\n\njob_status\"\275\001\n\003Mol\022\r\n\005atoms\030\001 \003("
      "\t\022\013\n\003xyz\030\002 \003(\001\022,\n\005units\030\003 \001(\0162\035.terachem"
      "_server.Mol.UnitType\022\016\n\006charge\030\004 \001(\005\022\024\n\014"
      "multiplicity\030\005 \001(\005\022\016\n\006closed\030\006 \001(\010\022\022\n\nre"
      "stricted\030\007 \001(\010\"\"\n\010UnitType\022\014\n\010ANGSTROM\020\000"
      "\022\010\n\004BOHR\020\001\"\347\004\n\010JobInput\022!\n\003mol\030\001 \001(\0132\024.t"
      "erachem_server.Mol\022.\n\003run\030\002 \001(\0162!.terach"
      "em_server.JobInput.RunType\0224\n\006method\030\003 \001"
      "(\0162$.terachem_server.JobInput.MethodType"
      "\022\r\n\005basis\030\004 \001(\t\022\021\n\torb1afile\030\010 \001(\t\022\021\n\tor"
      "b1bfile\030\t \001(\t\022\024\n\014user_options\030\007 \003(\t\022\014\n\004x"
      "yz2\030\021 \003(\001\022\031\n\021return_bond_order\030\020 \001(\010\"E\n\007"
      "RunType\022\n\n\006ENERGY\020\000\022\014\n\010GRADIENT\020\001\022\014\n\010COU"
      "PLING\020\016\022\022\n\016CI_VEC_OVERLAP\020\023\"\226\002\n\nMethodTy"
      "pe\022\006\n\002HF\020\000\022\010\n\004CASE\020\002\022\t\n\005SVWN1\020\003\022\t\n\005SVWN3"
      "\020\004\022\t\n\005SVWN5\020\005\022\010\n\004SVWN\020\005\022\n\n\006B3LYP1\020\006\022\t\n\005B"
      "3LYP\020\006\022\n\n\006B3LYP3\020\007\022\n\n\006B3LYP5\020\010\022\010\n\004BLYP\020\t"
      "\022\r\n\tBHANDHLYP\020\n\022\007\n\003PBE\020\013\022\n\n\006REVPBE\020\014\022\010\n\004"
      "PBE0\020\r\022\013\n\007REVPBE0\020\016\022\010\n\004WPBE\020\017\022\t\n\005WPBEH\020\020"
      "\022\007\n\003BOP\020\021\022\t\n\005MUBOP\020\022\022\014\n\010CAMB3LYP\020\023\022\007\n\003B9"
      "7\020\024\022\010\n\004WB97\020\025\022\t\n\005WB97X\020\026\032\002\020\001\"\375\003\n\tJobOutp"
      "ut\022!\n\003mol\030\001 \001(\0132\024.terachem_server.Mol\022\016\n"
      "\006energy\030\002 \003(\001\022\020\n\010gradient\030\003 \003(\001\022\017\n\007charg"
      "es\030\004 \003(\001\022\r\n\005spins\030\005 \003(\001\022\017\n\007dipoles\030\006 \003(\001"
      "\022\021\n\torb1afile\030\014 \001(\t\022\021\n\torb1bfile\030\r \001(\t\022\020"
      "\n\010orb_size\030\016 \001(\005\022\025\n\rorba_energies\030\031 \003(\001\022"
      "\025\n\rorbb_energies\030\032 \003(\001\022\030\n\020orba_occupatio"
      "ns\030\033 \003(\001\022\030\n\020orbb_occupations\030\034 \003(\001\022\017\n\007jo"
      "b_dir\030\t \001(\t\022\023\n\013job_scr_dir\030\n \001(\t\022\025\n\rserv"
      "er_job_id\030\013 \001(\005\022\r\n\005nacme\030\025 \003(\001\022\023\n\013ci_ove"
      "rlaps\030\021 \003(\001\022\027\n\017ci_overlap_size\030\022 \001(\005\022\031\n\021"
      "cas_energy_states\030\023 \003(\005\022\030\n\020cas_energy_mu"
      "lts\030\024 \003(\005\022\035\n\025cas_transition_dipole\030\026 \003(\001"
      "\022\022\n\nbond_order\030\020 \003(\001*\?\n\013MessageType\022\n\n\006S"
      "TATUS\020\000\022\007\n\003MOL\020\001\022\014\n\010JOBINPUT\020\002\022\r\n\tJOBOUT"
      "PUT\020\003B\033\252\002\030Google.Protobuf.TeraChemb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "terachem_server.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_terachem_5fserver_2eproto

const ::google::protobuf::EnumDescriptor* Mol_UnitType_descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_enum_descriptors[0];
}
bool Mol_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mol_UnitType Mol::ANGSTROM;
const Mol_UnitType Mol::BOHR;
const Mol_UnitType Mol::UnitType_MIN;
const Mol_UnitType Mol::UnitType_MAX;
const int Mol::UnitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JobInput_RunType_descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_enum_descriptors[1];
}
bool JobInput_RunType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 14:
    case 19:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JobInput_RunType JobInput::ENERGY;
const JobInput_RunType JobInput::GRADIENT;
const JobInput_RunType JobInput::COUPLING;
const JobInput_RunType JobInput::CI_VEC_OVERLAP;
const JobInput_RunType JobInput::RunType_MIN;
const JobInput_RunType JobInput::RunType_MAX;
const int JobInput::RunType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JobInput_MethodType_descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_enum_descriptors[2];
}
bool JobInput_MethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JobInput_MethodType JobInput::HF;
const JobInput_MethodType JobInput::CASE;
const JobInput_MethodType JobInput::SVWN1;
const JobInput_MethodType JobInput::SVWN3;
const JobInput_MethodType JobInput::SVWN5;
const JobInput_MethodType JobInput::SVWN;
const JobInput_MethodType JobInput::B3LYP1;
const JobInput_MethodType JobInput::B3LYP;
const JobInput_MethodType JobInput::B3LYP3;
const JobInput_MethodType JobInput::B3LYP5;
const JobInput_MethodType JobInput::BLYP;
const JobInput_MethodType JobInput::BHANDHLYP;
const JobInput_MethodType JobInput::PBE;
const JobInput_MethodType JobInput::REVPBE;
const JobInput_MethodType JobInput::PBE0;
const JobInput_MethodType JobInput::REVPBE0;
const JobInput_MethodType JobInput::WPBE;
const JobInput_MethodType JobInput::WPBEH;
const JobInput_MethodType JobInput::BOP;
const JobInput_MethodType JobInput::MUBOP;
const JobInput_MethodType JobInput::CAMB3LYP;
const JobInput_MethodType JobInput::B97;
const JobInput_MethodType JobInput::WB97;
const JobInput_MethodType JobInput::WB97X;
const JobInput_MethodType JobInput::MethodType_MIN;
const JobInput_MethodType JobInput::MethodType_MAX;
const int JobInput::MethodType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_enum_descriptors[3];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kBusyFieldNumber;
const int Status::kAcceptedFieldNumber;
const int Status::kWorkingFieldNumber;
const int Status::kCompletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_terachem_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:terachem_server.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  busy_ = from.busy_;
  clear_has_job_status();
  switch (from.job_status_case()) {
    case kAccepted: {
      set_accepted(from.accepted());
      break;
    }
    case kWorking: {
      set_working(from.working());
      break;
    }
    case kCompleted: {
      set_completed(from.completed());
      break;
    }
    case JOB_STATUS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:terachem_server.Status)
}

void Status::SharedCtor() {
  busy_ = false;
  clear_has_job_status();
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:terachem_server.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (has_job_status()) {
    clear_job_status();
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[0].descriptor;
}

const Status& Status::default_instance() {
  protobuf_terachem_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::clear_job_status() {
// @@protoc_insertion_point(one_of_clear_start:terachem_server.Status)
  switch (job_status_case()) {
    case kAccepted: {
      // No need to clear
      break;
    }
    case kWorking: {
      // No need to clear
      break;
    }
    case kCompleted: {
      // No need to clear
      break;
    }
    case JOB_STATUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = JOB_STATUS_NOT_SET;
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:terachem_server.Status)
  busy_ = false;
  clear_job_status();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:terachem_server.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool busy = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool accepted = 2;
      case 2: {
        if (tag == 16u) {
          clear_job_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &job_status_.accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool working = 3;
      case 3: {
        if (tag == 24u) {
          clear_job_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &job_status_.working_)));
          set_has_working();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool completed = 4;
      case 4: {
        if (tag == 32u) {
          clear_job_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &job_status_.completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:terachem_server.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:terachem_server.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:terachem_server.Status)
  // bool busy = 1;
  if (this->busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->busy(), output);
  }

  // bool accepted = 2;
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accepted(), output);
  }

  // bool working = 3;
  if (has_working()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->working(), output);
  }

  // bool completed = 4;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->completed(), output);
  }

  // @@protoc_insertion_point(serialize_end:terachem_server.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:terachem_server.Status)
  // bool busy = 1;
  if (this->busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->busy(), target);
  }

  // bool accepted = 2;
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accepted(), target);
  }

  // bool working = 3;
  if (has_working()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->working(), target);
  }

  // bool completed = 4;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->completed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:terachem_server.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:terachem_server.Status)
  size_t total_size = 0;

  // bool busy = 1;
  if (this->busy() != 0) {
    total_size += 1 + 1;
  }

  switch (job_status_case()) {
    // bool accepted = 2;
    case kAccepted: {
      total_size += 1 + 1;
      break;
    }
    // bool working = 3;
    case kWorking: {
      total_size += 1 + 1;
      break;
    }
    // bool completed = 4;
    case kCompleted: {
      total_size += 1 + 1;
      break;
    }
    case JOB_STATUS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:terachem_server.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:terachem_server.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:terachem_server.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:terachem_server.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.busy() != 0) {
    set_busy(from.busy());
  }
  switch (from.job_status_case()) {
    case kAccepted: {
      set_accepted(from.accepted());
      break;
    }
    case kWorking: {
      set_working(from.working());
      break;
    }
    case kCompleted: {
      set_completed(from.completed());
      break;
    }
    case JOB_STATUS_NOT_SET: {
      break;
    }
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:terachem_server.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:terachem_server.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(busy_, other->busy_);
  std::swap(job_status_, other->job_status_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// bool busy = 1;
void Status::clear_busy() {
  busy_ = false;
}
bool Status::busy() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.busy)
  return busy_;
}
void Status::set_busy(bool value) {
  
  busy_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.busy)
}

// bool accepted = 2;
bool Status::has_accepted() const {
  return job_status_case() == kAccepted;
}
void Status::set_has_accepted() {
  _oneof_case_[0] = kAccepted;
}
void Status::clear_accepted() {
  if (has_accepted()) {
    job_status_.accepted_ = false;
    clear_has_job_status();
  }
}
bool Status::accepted() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.accepted)
  if (has_accepted()) {
    return job_status_.accepted_;
  }
  return false;
}
void Status::set_accepted(bool value) {
  if (!has_accepted()) {
    clear_job_status();
    set_has_accepted();
  }
  job_status_.accepted_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.accepted)
}

// bool working = 3;
bool Status::has_working() const {
  return job_status_case() == kWorking;
}
void Status::set_has_working() {
  _oneof_case_[0] = kWorking;
}
void Status::clear_working() {
  if (has_working()) {
    job_status_.working_ = false;
    clear_has_job_status();
  }
}
bool Status::working() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.working)
  if (has_working()) {
    return job_status_.working_;
  }
  return false;
}
void Status::set_working(bool value) {
  if (!has_working()) {
    clear_job_status();
    set_has_working();
  }
  job_status_.working_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.working)
}

// bool completed = 4;
bool Status::has_completed() const {
  return job_status_case() == kCompleted;
}
void Status::set_has_completed() {
  _oneof_case_[0] = kCompleted;
}
void Status::clear_completed() {
  if (has_completed()) {
    job_status_.completed_ = false;
    clear_has_job_status();
  }
}
bool Status::completed() const {
  // @@protoc_insertion_point(field_get:terachem_server.Status.completed)
  if (has_completed()) {
    return job_status_.completed_;
  }
  return false;
}
void Status::set_completed(bool value) {
  if (!has_completed()) {
    clear_job_status();
    set_has_completed();
  }
  job_status_.completed_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Status.completed)
}

bool Status::has_job_status() const {
  return job_status_case() != JOB_STATUS_NOT_SET;
}
void Status::clear_has_job_status() {
  _oneof_case_[0] = JOB_STATUS_NOT_SET;
}
Status::JobStatusCase Status::job_status_case() const {
  return Status::JobStatusCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mol::kAtomsFieldNumber;
const int Mol::kXyzFieldNumber;
const int Mol::kUnitsFieldNumber;
const int Mol::kChargeFieldNumber;
const int Mol::kMultiplicityFieldNumber;
const int Mol::kClosedFieldNumber;
const int Mol::kRestrictedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mol::Mol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_terachem_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:terachem_server.Mol)
}
Mol::Mol(const Mol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      atoms_(from.atoms_),
      xyz_(from.xyz_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&units_, &from.units_,
    reinterpret_cast<char*>(&restricted_) -
    reinterpret_cast<char*>(&units_) + sizeof(restricted_));
  // @@protoc_insertion_point(copy_constructor:terachem_server.Mol)
}

void Mol::SharedCtor() {
  ::memset(&units_, 0, reinterpret_cast<char*>(&restricted_) -
    reinterpret_cast<char*>(&units_) + sizeof(restricted_));
  _cached_size_ = 0;
}

Mol::~Mol() {
  // @@protoc_insertion_point(destructor:terachem_server.Mol)
  SharedDtor();
}

void Mol::SharedDtor() {
}

void Mol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mol::descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[1].descriptor;
}

const Mol& Mol::default_instance() {
  protobuf_terachem_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mol* Mol::New(::google::protobuf::Arena* arena) const {
  Mol* n = new Mol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mol::Clear() {
// @@protoc_insertion_point(message_clear_start:terachem_server.Mol)
  atoms_.Clear();
  xyz_.Clear();
  ::memset(&units_, 0, reinterpret_cast<char*>(&restricted_) -
    reinterpret_cast<char*>(&units_) + sizeof(restricted_));
}

bool Mol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:terachem_server.Mol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string atoms = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_atoms()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->atoms(this->atoms_size() - 1).data(),
            this->atoms(this->atoms_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.Mol.atoms"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double xyz = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xyz())));
        } else if (tag == 17u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_xyz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .terachem_server.Mol.UnitType units = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_units(static_cast< ::terachem_server::Mol_UnitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 charge = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 multiplicity = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplicity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool closed = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool restricted = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:terachem_server.Mol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:terachem_server.Mol)
  return false;
#undef DO_
}

void Mol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:terachem_server.Mol)
  // repeated string atoms = 1;
  for (int i = 0; i < this->atoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->atoms(i).data(), this->atoms(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.Mol.atoms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->atoms(i), output);
  }

  // repeated double xyz = 2;
  if (this->xyz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xyz_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->xyz().data(), this->xyz_size(), output);
  }

  // .terachem_server.Mol.UnitType units = 3;
  if (this->units() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->units(), output);
  }

  // int32 charge = 4;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->charge(), output);
  }

  // int32 multiplicity = 5;
  if (this->multiplicity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiplicity(), output);
  }

  // bool closed = 6;
  if (this->closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->closed(), output);
  }

  // bool restricted = 7;
  if (this->restricted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->restricted(), output);
  }

  // @@protoc_insertion_point(serialize_end:terachem_server.Mol)
}

::google::protobuf::uint8* Mol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:terachem_server.Mol)
  // repeated string atoms = 1;
  for (int i = 0; i < this->atoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->atoms(i).data(), this->atoms(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.Mol.atoms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->atoms(i), target);
  }

  // repeated double xyz = 2;
  if (this->xyz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xyz_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xyz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xyz(i), target);
  }

  // .terachem_server.Mol.UnitType units = 3;
  if (this->units() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->units(), target);
  }

  // int32 charge = 4;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->charge(), target);
  }

  // int32 multiplicity = 5;
  if (this->multiplicity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multiplicity(), target);
  }

  // bool closed = 6;
  if (this->closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->closed(), target);
  }

  // bool restricted = 7;
  if (this->restricted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->restricted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:terachem_server.Mol)
  return target;
}

size_t Mol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:terachem_server.Mol)
  size_t total_size = 0;

  // repeated string atoms = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->atoms_size());
  for (int i = 0; i < this->atoms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->atoms(i));
  }

  // repeated double xyz = 2;
  {
    unsigned int count = this->xyz_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xyz_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .terachem_server.Mol.UnitType units = 3;
  if (this->units() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->units());
  }

  // int32 charge = 4;
  if (this->charge() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->charge());
  }

  // int32 multiplicity = 5;
  if (this->multiplicity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplicity());
  }

  // bool closed = 6;
  if (this->closed() != 0) {
    total_size += 1 + 1;
  }

  // bool restricted = 7;
  if (this->restricted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:terachem_server.Mol)
  GOOGLE_DCHECK_NE(&from, this);
  const Mol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:terachem_server.Mol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:terachem_server.Mol)
    MergeFrom(*source);
  }
}

void Mol::MergeFrom(const Mol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:terachem_server.Mol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  atoms_.MergeFrom(from.atoms_);
  xyz_.MergeFrom(from.xyz_);
  if (from.units() != 0) {
    set_units(from.units());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.multiplicity() != 0) {
    set_multiplicity(from.multiplicity());
  }
  if (from.closed() != 0) {
    set_closed(from.closed());
  }
  if (from.restricted() != 0) {
    set_restricted(from.restricted());
  }
}

void Mol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:terachem_server.Mol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mol::CopyFrom(const Mol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:terachem_server.Mol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mol::IsInitialized() const {
  return true;
}

void Mol::Swap(Mol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mol::InternalSwap(Mol* other) {
  atoms_.UnsafeArenaSwap(&other->atoms_);
  xyz_.UnsafeArenaSwap(&other->xyz_);
  std::swap(units_, other->units_);
  std::swap(charge_, other->charge_);
  std::swap(multiplicity_, other->multiplicity_);
  std::swap(closed_, other->closed_);
  std::swap(restricted_, other->restricted_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mol::GetMetadata() const {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mol

// repeated string atoms = 1;
int Mol::atoms_size() const {
  return atoms_.size();
}
void Mol::clear_atoms() {
  atoms_.Clear();
}
const ::std::string& Mol::atoms(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.atoms)
  return atoms_.Get(index);
}
::std::string* Mol::mutable_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:terachem_server.Mol.atoms)
  return atoms_.Mutable(index);
}
void Mol::set_atoms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:terachem_server.Mol.atoms)
  atoms_.Mutable(index)->assign(value);
}
void Mol::set_atoms(int index, const char* value) {
  atoms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:terachem_server.Mol.atoms)
}
void Mol::set_atoms(int index, const char* value, size_t size) {
  atoms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:terachem_server.Mol.atoms)
}
::std::string* Mol::add_atoms() {
  // @@protoc_insertion_point(field_add_mutable:terachem_server.Mol.atoms)
  return atoms_.Add();
}
void Mol::add_atoms(const ::std::string& value) {
  atoms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:terachem_server.Mol.atoms)
}
void Mol::add_atoms(const char* value) {
  atoms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:terachem_server.Mol.atoms)
}
void Mol::add_atoms(const char* value, size_t size) {
  atoms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:terachem_server.Mol.atoms)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mol::atoms() const {
  // @@protoc_insertion_point(field_list:terachem_server.Mol.atoms)
  return atoms_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Mol::mutable_atoms() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.Mol.atoms)
  return &atoms_;
}

// repeated double xyz = 2;
int Mol::xyz_size() const {
  return xyz_.size();
}
void Mol::clear_xyz() {
  xyz_.Clear();
}
double Mol::xyz(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.xyz)
  return xyz_.Get(index);
}
void Mol::set_xyz(int index, double value) {
  xyz_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.Mol.xyz)
}
void Mol::add_xyz(double value) {
  xyz_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.Mol.xyz)
}
const ::google::protobuf::RepeatedField< double >&
Mol::xyz() const {
  // @@protoc_insertion_point(field_list:terachem_server.Mol.xyz)
  return xyz_;
}
::google::protobuf::RepeatedField< double >*
Mol::mutable_xyz() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.Mol.xyz)
  return &xyz_;
}

// .terachem_server.Mol.UnitType units = 3;
void Mol::clear_units() {
  units_ = 0;
}
::terachem_server::Mol_UnitType Mol::units() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.units)
  return static_cast< ::terachem_server::Mol_UnitType >(units_);
}
void Mol::set_units(::terachem_server::Mol_UnitType value) {
  
  units_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.units)
}

// int32 charge = 4;
void Mol::clear_charge() {
  charge_ = 0;
}
::google::protobuf::int32 Mol::charge() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.charge)
  return charge_;
}
void Mol::set_charge(::google::protobuf::int32 value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.charge)
}

// int32 multiplicity = 5;
void Mol::clear_multiplicity() {
  multiplicity_ = 0;
}
::google::protobuf::int32 Mol::multiplicity() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.multiplicity)
  return multiplicity_;
}
void Mol::set_multiplicity(::google::protobuf::int32 value) {
  
  multiplicity_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.multiplicity)
}

// bool closed = 6;
void Mol::clear_closed() {
  closed_ = false;
}
bool Mol::closed() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.closed)
  return closed_;
}
void Mol::set_closed(bool value) {
  
  closed_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.closed)
}

// bool restricted = 7;
void Mol::clear_restricted() {
  restricted_ = false;
}
bool Mol::restricted() const {
  // @@protoc_insertion_point(field_get:terachem_server.Mol.restricted)
  return restricted_;
}
void Mol::set_restricted(bool value) {
  
  restricted_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.Mol.restricted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobInput::kMolFieldNumber;
const int JobInput::kRunFieldNumber;
const int JobInput::kMethodFieldNumber;
const int JobInput::kBasisFieldNumber;
const int JobInput::kOrb1AfileFieldNumber;
const int JobInput::kOrb1BfileFieldNumber;
const int JobInput::kUserOptionsFieldNumber;
const int JobInput::kXyz2FieldNumber;
const int JobInput::kReturnBondOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobInput::JobInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_terachem_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:terachem_server.JobInput)
}
JobInput::JobInput(const JobInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_options_(from.user_options_),
      xyz2_(from.xyz2_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basis().size() > 0) {
    basis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basis_);
  }
  orb1afile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orb1afile().size() > 0) {
    orb1afile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1afile_);
  }
  orb1bfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orb1bfile().size() > 0) {
    orb1bfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1bfile_);
  }
  if (from.has_mol()) {
    mol_ = new ::terachem_server::Mol(*from.mol_);
  } else {
    mol_ = NULL;
  }
  ::memcpy(&run_, &from.run_,
    reinterpret_cast<char*>(&return_bond_order_) -
    reinterpret_cast<char*>(&run_) + sizeof(return_bond_order_));
  // @@protoc_insertion_point(copy_constructor:terachem_server.JobInput)
}

void JobInput::SharedCtor() {
  basis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1afile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mol_, 0, reinterpret_cast<char*>(&return_bond_order_) -
    reinterpret_cast<char*>(&mol_) + sizeof(return_bond_order_));
  _cached_size_ = 0;
}

JobInput::~JobInput() {
  // @@protoc_insertion_point(destructor:terachem_server.JobInput)
  SharedDtor();
}

void JobInput::SharedDtor() {
  basis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1afile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete mol_;
  }
}

void JobInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobInput::descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[2].descriptor;
}

const JobInput& JobInput::default_instance() {
  protobuf_terachem_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobInput* JobInput::New(::google::protobuf::Arena* arena) const {
  JobInput* n = new JobInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobInput::Clear() {
// @@protoc_insertion_point(message_clear_start:terachem_server.JobInput)
  user_options_.Clear();
  xyz2_.Clear();
  basis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) {
    delete mol_;
  }
  mol_ = NULL;
  ::memset(&run_, 0, reinterpret_cast<char*>(&return_bond_order_) -
    reinterpret_cast<char*>(&run_) + sizeof(return_bond_order_));
}

bool JobInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:terachem_server.JobInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .terachem_server.Mol mol = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .terachem_server.JobInput.RunType run = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_run(static_cast< ::terachem_server::JobInput_RunType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .terachem_server.JobInput.MethodType method = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::terachem_server::JobInput_MethodType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basis = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basis().data(), this->basis().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobInput.basis"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user_options = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_options()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_options(this->user_options_size() - 1).data(),
            this->user_options(this->user_options_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobInput.user_options"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orb1afile = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orb1afile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orb1afile().data(), this->orb1afile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobInput.orb1afile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orb1bfile = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orb1bfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orb1bfile().data(), this->orb1bfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobInput.orb1bfile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_bond_order = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_bond_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double xyz2 = 17;
      case 17: {
        if (tag == 138u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xyz2())));
        } else if (tag == 137u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 138u, input, this->mutable_xyz2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:terachem_server.JobInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:terachem_server.JobInput)
  return false;
#undef DO_
}

void JobInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:terachem_server.JobInput)
  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mol_, output);
  }

  // .terachem_server.JobInput.RunType run = 2;
  if (this->run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->run(), output);
  }

  // .terachem_server.JobInput.MethodType method = 3;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method(), output);
  }

  // string basis = 4;
  if (this->basis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basis().data(), this->basis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.basis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->basis(), output);
  }

  // repeated string user_options = 7;
  for (int i = 0; i < this->user_options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_options(i).data(), this->user_options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.user_options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user_options(i), output);
  }

  // string orb1afile = 8;
  if (this->orb1afile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1afile().data(), this->orb1afile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.orb1afile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->orb1afile(), output);
  }

  // string orb1bfile = 9;
  if (this->orb1bfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1bfile().data(), this->orb1bfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.orb1bfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->orb1bfile(), output);
  }

  // bool return_bond_order = 16;
  if (this->return_bond_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->return_bond_order(), output);
  }

  // repeated double xyz2 = 17;
  if (this->xyz2_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xyz2_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->xyz2().data(), this->xyz2_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:terachem_server.JobInput)
}

::google::protobuf::uint8* JobInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:terachem_server.JobInput)
  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mol_, false, target);
  }

  // .terachem_server.JobInput.RunType run = 2;
  if (this->run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->run(), target);
  }

  // .terachem_server.JobInput.MethodType method = 3;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method(), target);
  }

  // string basis = 4;
  if (this->basis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basis().data(), this->basis().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.basis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->basis(), target);
  }

  // repeated string user_options = 7;
  for (int i = 0; i < this->user_options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_options(i).data(), this->user_options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.user_options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->user_options(i), target);
  }

  // string orb1afile = 8;
  if (this->orb1afile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1afile().data(), this->orb1afile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.orb1afile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->orb1afile(), target);
  }

  // string orb1bfile = 9;
  if (this->orb1bfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1bfile().data(), this->orb1bfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobInput.orb1bfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->orb1bfile(), target);
  }

  // bool return_bond_order = 16;
  if (this->return_bond_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->return_bond_order(), target);
  }

  // repeated double xyz2 = 17;
  if (this->xyz2_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xyz2_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xyz2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xyz2(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:terachem_server.JobInput)
  return target;
}

size_t JobInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:terachem_server.JobInput)
  size_t total_size = 0;

  // repeated string user_options = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_options_size());
  for (int i = 0; i < this->user_options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_options(i));
  }

  // repeated double xyz2 = 17;
  {
    unsigned int count = this->xyz2_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xyz2_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string basis = 4;
  if (this->basis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basis());
  }

  // string orb1afile = 8;
  if (this->orb1afile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orb1afile());
  }

  // string orb1bfile = 9;
  if (this->orb1bfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orb1bfile());
  }

  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mol_);
  }

  // .terachem_server.JobInput.RunType run = 2;
  if (this->run() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->run());
  }

  // .terachem_server.JobInput.MethodType method = 3;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  // bool return_bond_order = 16;
  if (this->return_bond_order() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:terachem_server.JobInput)
  GOOGLE_DCHECK_NE(&from, this);
  const JobInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:terachem_server.JobInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:terachem_server.JobInput)
    MergeFrom(*source);
  }
}

void JobInput::MergeFrom(const JobInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:terachem_server.JobInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_options_.MergeFrom(from.user_options_);
  xyz2_.MergeFrom(from.xyz2_);
  if (from.basis().size() > 0) {

    basis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basis_);
  }
  if (from.orb1afile().size() > 0) {

    orb1afile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1afile_);
  }
  if (from.orb1bfile().size() > 0) {

    orb1bfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1bfile_);
  }
  if (from.has_mol()) {
    mutable_mol()->::terachem_server::Mol::MergeFrom(from.mol());
  }
  if (from.run() != 0) {
    set_run(from.run());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.return_bond_order() != 0) {
    set_return_bond_order(from.return_bond_order());
  }
}

void JobInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:terachem_server.JobInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobInput::CopyFrom(const JobInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:terachem_server.JobInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInput::IsInitialized() const {
  return true;
}

void JobInput::Swap(JobInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobInput::InternalSwap(JobInput* other) {
  user_options_.UnsafeArenaSwap(&other->user_options_);
  xyz2_.UnsafeArenaSwap(&other->xyz2_);
  basis_.Swap(&other->basis_);
  orb1afile_.Swap(&other->orb1afile_);
  orb1bfile_.Swap(&other->orb1bfile_);
  std::swap(mol_, other->mol_);
  std::swap(run_, other->run_);
  std::swap(method_, other->method_);
  std::swap(return_bond_order_, other->return_bond_order_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobInput::GetMetadata() const {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobInput

// .terachem_server.Mol mol = 1;
bool JobInput::has_mol() const {
  return this != internal_default_instance() && mol_ != NULL;
}
void JobInput::clear_mol() {
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) delete mol_;
  mol_ = NULL;
}
const ::terachem_server::Mol& JobInput::mol() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.mol)
  return mol_ != NULL ? *mol_
                         : *::terachem_server::Mol::internal_default_instance();
}
::terachem_server::Mol* JobInput::mutable_mol() {
  
  if (mol_ == NULL) {
    mol_ = new ::terachem_server::Mol;
  }
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.mol)
  return mol_;
}
::terachem_server::Mol* JobInput::release_mol() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.mol)
  
  ::terachem_server::Mol* temp = mol_;
  mol_ = NULL;
  return temp;
}
void JobInput::set_allocated_mol(::terachem_server::Mol* mol) {
  delete mol_;
  mol_ = mol;
  if (mol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.mol)
}

// .terachem_server.JobInput.RunType run = 2;
void JobInput::clear_run() {
  run_ = 0;
}
::terachem_server::JobInput_RunType JobInput::run() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.run)
  return static_cast< ::terachem_server::JobInput_RunType >(run_);
}
void JobInput::set_run(::terachem_server::JobInput_RunType value) {
  
  run_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.run)
}

// .terachem_server.JobInput.MethodType method = 3;
void JobInput::clear_method() {
  method_ = 0;
}
::terachem_server::JobInput_MethodType JobInput::method() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.method)
  return static_cast< ::terachem_server::JobInput_MethodType >(method_);
}
void JobInput::set_method(::terachem_server::JobInput_MethodType value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.method)
}

// string basis = 4;
void JobInput::clear_basis() {
  basis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobInput::basis() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.basis)
  return basis_.GetNoArena();
}
void JobInput::set_basis(const ::std::string& value) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.basis)
}
#if LANG_CXX11
void JobInput::set_basis(::std::string&& value) {
  
  basis_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.basis)
}
#endif
void JobInput::set_basis(const char* value) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.basis)
}
void JobInput::set_basis(const char* value, size_t size) {
  
  basis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.basis)
}
::std::string* JobInput::mutable_basis() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.basis)
  return basis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobInput::release_basis() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.basis)
  
  return basis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobInput::set_allocated_basis(::std::string* basis) {
  if (basis != NULL) {
    
  } else {
    
  }
  basis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basis);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.basis)
}

// string orb1afile = 8;
void JobInput::clear_orb1afile() {
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobInput::orb1afile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.orb1afile)
  return orb1afile_.GetNoArena();
}
void JobInput::set_orb1afile(const ::std::string& value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.orb1afile)
}
#if LANG_CXX11
void JobInput::set_orb1afile(::std::string&& value) {
  
  orb1afile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.orb1afile)
}
#endif
void JobInput::set_orb1afile(const char* value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.orb1afile)
}
void JobInput::set_orb1afile(const char* value, size_t size) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.orb1afile)
}
::std::string* JobInput::mutable_orb1afile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.orb1afile)
  return orb1afile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobInput::release_orb1afile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.orb1afile)
  
  return orb1afile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobInput::set_allocated_orb1afile(::std::string* orb1afile) {
  if (orb1afile != NULL) {
    
  } else {
    
  }
  orb1afile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1afile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.orb1afile)
}

// string orb1bfile = 9;
void JobInput::clear_orb1bfile() {
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobInput::orb1bfile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.orb1bfile)
  return orb1bfile_.GetNoArena();
}
void JobInput::set_orb1bfile(const ::std::string& value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.orb1bfile)
}
#if LANG_CXX11
void JobInput::set_orb1bfile(::std::string&& value) {
  
  orb1bfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobInput.orb1bfile)
}
#endif
void JobInput::set_orb1bfile(const char* value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.orb1bfile)
}
void JobInput::set_orb1bfile(const char* value, size_t size) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.orb1bfile)
}
::std::string* JobInput::mutable_orb1bfile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.orb1bfile)
  return orb1bfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobInput::release_orb1bfile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobInput.orb1bfile)
  
  return orb1bfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobInput::set_allocated_orb1bfile(::std::string* orb1bfile) {
  if (orb1bfile != NULL) {
    
  } else {
    
  }
  orb1bfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1bfile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobInput.orb1bfile)
}

// repeated string user_options = 7;
int JobInput::user_options_size() const {
  return user_options_.size();
}
void JobInput::clear_user_options() {
  user_options_.Clear();
}
const ::std::string& JobInput::user_options(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.user_options)
  return user_options_.Get(index);
}
::std::string* JobInput::mutable_user_options(int index) {
  // @@protoc_insertion_point(field_mutable:terachem_server.JobInput.user_options)
  return user_options_.Mutable(index);
}
void JobInput::set_user_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.user_options)
  user_options_.Mutable(index)->assign(value);
}
void JobInput::set_user_options(int index, const char* value) {
  user_options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:terachem_server.JobInput.user_options)
}
void JobInput::set_user_options(int index, const char* value, size_t size) {
  user_options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobInput.user_options)
}
::std::string* JobInput::add_user_options() {
  // @@protoc_insertion_point(field_add_mutable:terachem_server.JobInput.user_options)
  return user_options_.Add();
}
void JobInput::add_user_options(const ::std::string& value) {
  user_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobInput.user_options)
}
void JobInput::add_user_options(const char* value) {
  user_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:terachem_server.JobInput.user_options)
}
void JobInput::add_user_options(const char* value, size_t size) {
  user_options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:terachem_server.JobInput.user_options)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobInput::user_options() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobInput.user_options)
  return user_options_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
JobInput::mutable_user_options() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobInput.user_options)
  return &user_options_;
}

// repeated double xyz2 = 17;
int JobInput::xyz2_size() const {
  return xyz2_.size();
}
void JobInput::clear_xyz2() {
  xyz2_.Clear();
}
double JobInput::xyz2(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.xyz2)
  return xyz2_.Get(index);
}
void JobInput::set_xyz2(int index, double value) {
  xyz2_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.xyz2)
}
void JobInput::add_xyz2(double value) {
  xyz2_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobInput.xyz2)
}
const ::google::protobuf::RepeatedField< double >&
JobInput::xyz2() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobInput.xyz2)
  return xyz2_;
}
::google::protobuf::RepeatedField< double >*
JobInput::mutable_xyz2() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobInput.xyz2)
  return &xyz2_;
}

// bool return_bond_order = 16;
void JobInput::clear_return_bond_order() {
  return_bond_order_ = false;
}
bool JobInput::return_bond_order() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobInput.return_bond_order)
  return return_bond_order_;
}
void JobInput::set_return_bond_order(bool value) {
  
  return_bond_order_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobInput.return_bond_order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobOutput::kMolFieldNumber;
const int JobOutput::kEnergyFieldNumber;
const int JobOutput::kGradientFieldNumber;
const int JobOutput::kChargesFieldNumber;
const int JobOutput::kSpinsFieldNumber;
const int JobOutput::kDipolesFieldNumber;
const int JobOutput::kOrb1AfileFieldNumber;
const int JobOutput::kOrb1BfileFieldNumber;
const int JobOutput::kOrbSizeFieldNumber;
const int JobOutput::kOrbaEnergiesFieldNumber;
const int JobOutput::kOrbbEnergiesFieldNumber;
const int JobOutput::kOrbaOccupationsFieldNumber;
const int JobOutput::kOrbbOccupationsFieldNumber;
const int JobOutput::kJobDirFieldNumber;
const int JobOutput::kJobScrDirFieldNumber;
const int JobOutput::kServerJobIdFieldNumber;
const int JobOutput::kNacmeFieldNumber;
const int JobOutput::kCiOverlapsFieldNumber;
const int JobOutput::kCiOverlapSizeFieldNumber;
const int JobOutput::kCasEnergyStatesFieldNumber;
const int JobOutput::kCasEnergyMultsFieldNumber;
const int JobOutput::kCasTransitionDipoleFieldNumber;
const int JobOutput::kBondOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobOutput::JobOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_terachem_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:terachem_server.JobOutput)
}
JobOutput::JobOutput(const JobOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      energy_(from.energy_),
      gradient_(from.gradient_),
      charges_(from.charges_),
      spins_(from.spins_),
      dipoles_(from.dipoles_),
      orba_energies_(from.orba_energies_),
      orbb_energies_(from.orbb_energies_),
      orba_occupations_(from.orba_occupations_),
      orbb_occupations_(from.orbb_occupations_),
      nacme_(from.nacme_),
      ci_overlaps_(from.ci_overlaps_),
      cas_energy_states_(from.cas_energy_states_),
      cas_energy_mults_(from.cas_energy_mults_),
      cas_transition_dipole_(from.cas_transition_dipole_),
      bond_order_(from.bond_order_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orb1afile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orb1afile().size() > 0) {
    orb1afile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1afile_);
  }
  orb1bfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orb1bfile().size() > 0) {
    orb1bfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1bfile_);
  }
  job_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_dir().size() > 0) {
    job_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_dir_);
  }
  job_scr_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_scr_dir().size() > 0) {
    job_scr_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_scr_dir_);
  }
  if (from.has_mol()) {
    mol_ = new ::terachem_server::Mol(*from.mol_);
  } else {
    mol_ = NULL;
  }
  ::memcpy(&orb_size_, &from.orb_size_,
    reinterpret_cast<char*>(&ci_overlap_size_) -
    reinterpret_cast<char*>(&orb_size_) + sizeof(ci_overlap_size_));
  // @@protoc_insertion_point(copy_constructor:terachem_server.JobOutput)
}

void JobOutput::SharedCtor() {
  orb1afile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_scr_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mol_, 0, reinterpret_cast<char*>(&ci_overlap_size_) -
    reinterpret_cast<char*>(&mol_) + sizeof(ci_overlap_size_));
  _cached_size_ = 0;
}

JobOutput::~JobOutput() {
  // @@protoc_insertion_point(destructor:terachem_server.JobOutput)
  SharedDtor();
}

void JobOutput::SharedDtor() {
  orb1afile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_scr_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete mol_;
  }
}

void JobOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobOutput::descriptor() {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[3].descriptor;
}

const JobOutput& JobOutput::default_instance() {
  protobuf_terachem_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobOutput* JobOutput::New(::google::protobuf::Arena* arena) const {
  JobOutput* n = new JobOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:terachem_server.JobOutput)
  energy_.Clear();
  gradient_.Clear();
  charges_.Clear();
  spins_.Clear();
  dipoles_.Clear();
  orba_energies_.Clear();
  orbb_energies_.Clear();
  orba_occupations_.Clear();
  orbb_occupations_.Clear();
  nacme_.Clear();
  ci_overlaps_.Clear();
  cas_energy_states_.Clear();
  cas_energy_mults_.Clear();
  cas_transition_dipole_.Clear();
  bond_order_.Clear();
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_scr_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) {
    delete mol_;
  }
  mol_ = NULL;
  ::memset(&orb_size_, 0, reinterpret_cast<char*>(&ci_overlap_size_) -
    reinterpret_cast<char*>(&orb_size_) + sizeof(ci_overlap_size_));
}

bool JobOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:terachem_server.JobOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .terachem_server.Mol mol = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double energy = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_energy())));
        } else if (tag == 17u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_energy())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double gradient = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_gradient())));
        } else if (tag == 25u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_gradient())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double charges = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_charges())));
        } else if (tag == 33u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_charges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double spins = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_spins())));
        } else if (tag == 41u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_spins())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dipoles = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dipoles())));
        } else if (tag == 49u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_dipoles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_dir = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_dir().data(), this->job_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobOutput.job_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_scr_dir = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_scr_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_scr_dir().data(), this->job_scr_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobOutput.job_scr_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_job_id = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orb1afile = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orb1afile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orb1afile().data(), this->orb1afile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobOutput.orb1afile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orb1bfile = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orb1bfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orb1bfile().data(), this->orb1bfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "terachem_server.JobOutput.orb1bfile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orb_size = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orb_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double bond_order = 16;
      case 16: {
        if (tag == 130u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bond_order())));
        } else if (tag == 129u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 130u, input, this->mutable_bond_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ci_overlaps = 17;
      case 17: {
        if (tag == 138u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ci_overlaps())));
        } else if (tag == 137u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 138u, input, this->mutable_ci_overlaps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ci_overlap_size = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ci_overlap_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cas_energy_states = 19;
      case 19: {
        if (tag == 154u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cas_energy_states())));
        } else if (tag == 152u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 154u, input, this->mutable_cas_energy_states())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cas_energy_mults = 20;
      case 20: {
        if (tag == 162u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cas_energy_mults())));
        } else if (tag == 160u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 162u, input, this->mutable_cas_energy_mults())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double nacme = 21;
      case 21: {
        if (tag == 170u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_nacme())));
        } else if (tag == 169u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 170u, input, this->mutable_nacme())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cas_transition_dipole = 22;
      case 22: {
        if (tag == 178u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cas_transition_dipole())));
        } else if (tag == 177u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 178u, input, this->mutable_cas_transition_dipole())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orba_energies = 25;
      case 25: {
        if (tag == 202u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orba_energies())));
        } else if (tag == 201u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 202u, input, this->mutable_orba_energies())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orbb_energies = 26;
      case 26: {
        if (tag == 210u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orbb_energies())));
        } else if (tag == 209u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 210u, input, this->mutable_orbb_energies())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orba_occupations = 27;
      case 27: {
        if (tag == 218u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orba_occupations())));
        } else if (tag == 217u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 218u, input, this->mutable_orba_occupations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double orbb_occupations = 28;
      case 28: {
        if (tag == 226u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_orbb_occupations())));
        } else if (tag == 225u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 226u, input, this->mutable_orbb_occupations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:terachem_server.JobOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:terachem_server.JobOutput)
  return false;
#undef DO_
}

void JobOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:terachem_server.JobOutput)
  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mol_, output);
  }

  // repeated double energy = 2;
  if (this->energy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_energy_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->energy().data(), this->energy_size(), output);
  }

  // repeated double gradient = 3;
  if (this->gradient_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gradient_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->gradient().data(), this->gradient_size(), output);
  }

  // repeated double charges = 4;
  if (this->charges_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_charges_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->charges().data(), this->charges_size(), output);
  }

  // repeated double spins = 5;
  if (this->spins_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spins_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->spins().data(), this->spins_size(), output);
  }

  // repeated double dipoles = 6;
  if (this->dipoles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dipoles_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->dipoles().data(), this->dipoles_size(), output);
  }

  // string job_dir = 9;
  if (this->job_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.job_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->job_dir(), output);
  }

  // string job_scr_dir = 10;
  if (this->job_scr_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_scr_dir().data(), this->job_scr_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.job_scr_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->job_scr_dir(), output);
  }

  // int32 server_job_id = 11;
  if (this->server_job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->server_job_id(), output);
  }

  // string orb1afile = 12;
  if (this->orb1afile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1afile().data(), this->orb1afile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.orb1afile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->orb1afile(), output);
  }

  // string orb1bfile = 13;
  if (this->orb1bfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1bfile().data(), this->orb1bfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.orb1bfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->orb1bfile(), output);
  }

  // int32 orb_size = 14;
  if (this->orb_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->orb_size(), output);
  }

  // repeated double bond_order = 16;
  if (this->bond_order_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bond_order_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->bond_order().data(), this->bond_order_size(), output);
  }

  // repeated double ci_overlaps = 17;
  if (this->ci_overlaps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ci_overlaps_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->ci_overlaps().data(), this->ci_overlaps_size(), output);
  }

  // int32 ci_overlap_size = 18;
  if (this->ci_overlap_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ci_overlap_size(), output);
  }

  // repeated int32 cas_energy_states = 19;
  if (this->cas_energy_states_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cas_energy_states_cached_byte_size_);
  }
  for (int i = 0; i < this->cas_energy_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cas_energy_states(i), output);
  }

  // repeated int32 cas_energy_mults = 20;
  if (this->cas_energy_mults_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cas_energy_mults_cached_byte_size_);
  }
  for (int i = 0; i < this->cas_energy_mults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cas_energy_mults(i), output);
  }

  // repeated double nacme = 21;
  if (this->nacme_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nacme_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->nacme().data(), this->nacme_size(), output);
  }

  // repeated double cas_transition_dipole = 22;
  if (this->cas_transition_dipole_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cas_transition_dipole_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->cas_transition_dipole().data(), this->cas_transition_dipole_size(), output);
  }

  // repeated double orba_energies = 25;
  if (this->orba_energies_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orba_energies_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orba_energies().data(), this->orba_energies_size(), output);
  }

  // repeated double orbb_energies = 26;
  if (this->orbb_energies_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orbb_energies_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orbb_energies().data(), this->orbb_energies_size(), output);
  }

  // repeated double orba_occupations = 27;
  if (this->orba_occupations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(27, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orba_occupations_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orba_occupations().data(), this->orba_occupations_size(), output);
  }

  // repeated double orbb_occupations = 28;
  if (this->orbb_occupations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(28, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_orbb_occupations_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->orbb_occupations().data(), this->orbb_occupations_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:terachem_server.JobOutput)
}

::google::protobuf::uint8* JobOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:terachem_server.JobOutput)
  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mol_, false, target);
  }

  // repeated double energy = 2;
  if (this->energy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _energy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->energy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->energy(i), target);
  }

  // repeated double gradient = 3;
  if (this->gradient_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gradient_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gradient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->gradient(i), target);
  }

  // repeated double charges = 4;
  if (this->charges_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _charges_cached_byte_size_, target);
  }
  for (int i = 0; i < this->charges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->charges(i), target);
  }

  // repeated double spins = 5;
  if (this->spins_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spins_cached_byte_size_, target);
  }
  for (int i = 0; i < this->spins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->spins(i), target);
  }

  // repeated double dipoles = 6;
  if (this->dipoles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dipoles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dipoles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->dipoles(i), target);
  }

  // string job_dir = 9;
  if (this->job_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.job_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->job_dir(), target);
  }

  // string job_scr_dir = 10;
  if (this->job_scr_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_scr_dir().data(), this->job_scr_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.job_scr_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->job_scr_dir(), target);
  }

  // int32 server_job_id = 11;
  if (this->server_job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->server_job_id(), target);
  }

  // string orb1afile = 12;
  if (this->orb1afile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1afile().data(), this->orb1afile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.orb1afile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->orb1afile(), target);
  }

  // string orb1bfile = 13;
  if (this->orb1bfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orb1bfile().data(), this->orb1bfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "terachem_server.JobOutput.orb1bfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->orb1bfile(), target);
  }

  // int32 orb_size = 14;
  if (this->orb_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->orb_size(), target);
  }

  // repeated double bond_order = 16;
  if (this->bond_order_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bond_order_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bond_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bond_order(i), target);
  }

  // repeated double ci_overlaps = 17;
  if (this->ci_overlaps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ci_overlaps_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ci_overlaps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ci_overlaps(i), target);
  }

  // int32 ci_overlap_size = 18;
  if (this->ci_overlap_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ci_overlap_size(), target);
  }

  // repeated int32 cas_energy_states = 19;
  if (this->cas_energy_states_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cas_energy_states_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cas_energy_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cas_energy_states(i), target);
  }

  // repeated int32 cas_energy_mults = 20;
  if (this->cas_energy_mults_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cas_energy_mults_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cas_energy_mults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cas_energy_mults(i), target);
  }

  // repeated double nacme = 21;
  if (this->nacme_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nacme_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nacme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->nacme(i), target);
  }

  // repeated double cas_transition_dipole = 22;
  if (this->cas_transition_dipole_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cas_transition_dipole_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cas_transition_dipole_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->cas_transition_dipole(i), target);
  }

  // repeated double orba_energies = 25;
  if (this->orba_energies_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orba_energies_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orba_energies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orba_energies(i), target);
  }

  // repeated double orbb_energies = 26;
  if (this->orbb_energies_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orbb_energies_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orbb_energies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orbb_energies(i), target);
  }

  // repeated double orba_occupations = 27;
  if (this->orba_occupations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      27,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orba_occupations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orba_occupations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orba_occupations(i), target);
  }

  // repeated double orbb_occupations = 28;
  if (this->orbb_occupations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      28,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _orbb_occupations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->orbb_occupations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->orbb_occupations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:terachem_server.JobOutput)
  return target;
}

size_t JobOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:terachem_server.JobOutput)
  size_t total_size = 0;

  // repeated double energy = 2;
  {
    unsigned int count = this->energy_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _energy_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double gradient = 3;
  {
    unsigned int count = this->gradient_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gradient_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double charges = 4;
  {
    unsigned int count = this->charges_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _charges_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double spins = 5;
  {
    unsigned int count = this->spins_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spins_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double dipoles = 6;
  {
    unsigned int count = this->dipoles_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dipoles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orba_energies = 25;
  {
    unsigned int count = this->orba_energies_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orba_energies_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orbb_energies = 26;
  {
    unsigned int count = this->orbb_energies_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orbb_energies_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orba_occupations = 27;
  {
    unsigned int count = this->orba_occupations_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orba_occupations_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double orbb_occupations = 28;
  {
    unsigned int count = this->orbb_occupations_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _orbb_occupations_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double nacme = 21;
  {
    unsigned int count = this->nacme_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nacme_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ci_overlaps = 17;
  {
    unsigned int count = this->ci_overlaps_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ci_overlaps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 cas_energy_states = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cas_energy_states_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cas_energy_states_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 cas_energy_mults = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cas_energy_mults_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cas_energy_mults_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double cas_transition_dipole = 22;
  {
    unsigned int count = this->cas_transition_dipole_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cas_transition_dipole_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double bond_order = 16;
  {
    unsigned int count = this->bond_order_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bond_order_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string orb1afile = 12;
  if (this->orb1afile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orb1afile());
  }

  // string orb1bfile = 13;
  if (this->orb1bfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orb1bfile());
  }

  // string job_dir = 9;
  if (this->job_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_dir());
  }

  // string job_scr_dir = 10;
  if (this->job_scr_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_scr_dir());
  }

  // .terachem_server.Mol mol = 1;
  if (this->has_mol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mol_);
  }

  // int32 orb_size = 14;
  if (this->orb_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orb_size());
  }

  // int32 server_job_id = 11;
  if (this->server_job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_job_id());
  }

  // int32 ci_overlap_size = 18;
  if (this->ci_overlap_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ci_overlap_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:terachem_server.JobOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const JobOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:terachem_server.JobOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:terachem_server.JobOutput)
    MergeFrom(*source);
  }
}

void JobOutput::MergeFrom(const JobOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:terachem_server.JobOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  energy_.MergeFrom(from.energy_);
  gradient_.MergeFrom(from.gradient_);
  charges_.MergeFrom(from.charges_);
  spins_.MergeFrom(from.spins_);
  dipoles_.MergeFrom(from.dipoles_);
  orba_energies_.MergeFrom(from.orba_energies_);
  orbb_energies_.MergeFrom(from.orbb_energies_);
  orba_occupations_.MergeFrom(from.orba_occupations_);
  orbb_occupations_.MergeFrom(from.orbb_occupations_);
  nacme_.MergeFrom(from.nacme_);
  ci_overlaps_.MergeFrom(from.ci_overlaps_);
  cas_energy_states_.MergeFrom(from.cas_energy_states_);
  cas_energy_mults_.MergeFrom(from.cas_energy_mults_);
  cas_transition_dipole_.MergeFrom(from.cas_transition_dipole_);
  bond_order_.MergeFrom(from.bond_order_);
  if (from.orb1afile().size() > 0) {

    orb1afile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1afile_);
  }
  if (from.orb1bfile().size() > 0) {

    orb1bfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orb1bfile_);
  }
  if (from.job_dir().size() > 0) {

    job_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_dir_);
  }
  if (from.job_scr_dir().size() > 0) {

    job_scr_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_scr_dir_);
  }
  if (from.has_mol()) {
    mutable_mol()->::terachem_server::Mol::MergeFrom(from.mol());
  }
  if (from.orb_size() != 0) {
    set_orb_size(from.orb_size());
  }
  if (from.server_job_id() != 0) {
    set_server_job_id(from.server_job_id());
  }
  if (from.ci_overlap_size() != 0) {
    set_ci_overlap_size(from.ci_overlap_size());
  }
}

void JobOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:terachem_server.JobOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobOutput::CopyFrom(const JobOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:terachem_server.JobOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobOutput::IsInitialized() const {
  return true;
}

void JobOutput::Swap(JobOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobOutput::InternalSwap(JobOutput* other) {
  energy_.UnsafeArenaSwap(&other->energy_);
  gradient_.UnsafeArenaSwap(&other->gradient_);
  charges_.UnsafeArenaSwap(&other->charges_);
  spins_.UnsafeArenaSwap(&other->spins_);
  dipoles_.UnsafeArenaSwap(&other->dipoles_);
  orba_energies_.UnsafeArenaSwap(&other->orba_energies_);
  orbb_energies_.UnsafeArenaSwap(&other->orbb_energies_);
  orba_occupations_.UnsafeArenaSwap(&other->orba_occupations_);
  orbb_occupations_.UnsafeArenaSwap(&other->orbb_occupations_);
  nacme_.UnsafeArenaSwap(&other->nacme_);
  ci_overlaps_.UnsafeArenaSwap(&other->ci_overlaps_);
  cas_energy_states_.UnsafeArenaSwap(&other->cas_energy_states_);
  cas_energy_mults_.UnsafeArenaSwap(&other->cas_energy_mults_);
  cas_transition_dipole_.UnsafeArenaSwap(&other->cas_transition_dipole_);
  bond_order_.UnsafeArenaSwap(&other->bond_order_);
  orb1afile_.Swap(&other->orb1afile_);
  orb1bfile_.Swap(&other->orb1bfile_);
  job_dir_.Swap(&other->job_dir_);
  job_scr_dir_.Swap(&other->job_scr_dir_);
  std::swap(mol_, other->mol_);
  std::swap(orb_size_, other->orb_size_);
  std::swap(server_job_id_, other->server_job_id_);
  std::swap(ci_overlap_size_, other->ci_overlap_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobOutput::GetMetadata() const {
  protobuf_terachem_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_terachem_5fserver_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobOutput

// .terachem_server.Mol mol = 1;
bool JobOutput::has_mol() const {
  return this != internal_default_instance() && mol_ != NULL;
}
void JobOutput::clear_mol() {
  if (GetArenaNoVirtual() == NULL && mol_ != NULL) delete mol_;
  mol_ = NULL;
}
const ::terachem_server::Mol& JobOutput::mol() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.mol)
  return mol_ != NULL ? *mol_
                         : *::terachem_server::Mol::internal_default_instance();
}
::terachem_server::Mol* JobOutput::mutable_mol() {
  
  if (mol_ == NULL) {
    mol_ = new ::terachem_server::Mol;
  }
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.mol)
  return mol_;
}
::terachem_server::Mol* JobOutput::release_mol() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.mol)
  
  ::terachem_server::Mol* temp = mol_;
  mol_ = NULL;
  return temp;
}
void JobOutput::set_allocated_mol(::terachem_server::Mol* mol) {
  delete mol_;
  mol_ = mol;
  if (mol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.mol)
}

// repeated double energy = 2;
int JobOutput::energy_size() const {
  return energy_.size();
}
void JobOutput::clear_energy() {
  energy_.Clear();
}
double JobOutput::energy(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.energy)
  return energy_.Get(index);
}
void JobOutput::set_energy(int index, double value) {
  energy_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.energy)
}
void JobOutput::add_energy(double value) {
  energy_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.energy)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::energy() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.energy)
  return energy_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_energy() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.energy)
  return &energy_;
}

// repeated double gradient = 3;
int JobOutput::gradient_size() const {
  return gradient_.size();
}
void JobOutput::clear_gradient() {
  gradient_.Clear();
}
double JobOutput::gradient(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.gradient)
  return gradient_.Get(index);
}
void JobOutput::set_gradient(int index, double value) {
  gradient_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.gradient)
}
void JobOutput::add_gradient(double value) {
  gradient_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.gradient)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::gradient() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.gradient)
  return gradient_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_gradient() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.gradient)
  return &gradient_;
}

// repeated double charges = 4;
int JobOutput::charges_size() const {
  return charges_.size();
}
void JobOutput::clear_charges() {
  charges_.Clear();
}
double JobOutput::charges(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.charges)
  return charges_.Get(index);
}
void JobOutput::set_charges(int index, double value) {
  charges_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.charges)
}
void JobOutput::add_charges(double value) {
  charges_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.charges)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::charges() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.charges)
  return charges_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_charges() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.charges)
  return &charges_;
}

// repeated double spins = 5;
int JobOutput::spins_size() const {
  return spins_.size();
}
void JobOutput::clear_spins() {
  spins_.Clear();
}
double JobOutput::spins(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.spins)
  return spins_.Get(index);
}
void JobOutput::set_spins(int index, double value) {
  spins_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.spins)
}
void JobOutput::add_spins(double value) {
  spins_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.spins)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::spins() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.spins)
  return spins_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_spins() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.spins)
  return &spins_;
}

// repeated double dipoles = 6;
int JobOutput::dipoles_size() const {
  return dipoles_.size();
}
void JobOutput::clear_dipoles() {
  dipoles_.Clear();
}
double JobOutput::dipoles(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.dipoles)
  return dipoles_.Get(index);
}
void JobOutput::set_dipoles(int index, double value) {
  dipoles_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.dipoles)
}
void JobOutput::add_dipoles(double value) {
  dipoles_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.dipoles)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::dipoles() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.dipoles)
  return dipoles_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_dipoles() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.dipoles)
  return &dipoles_;
}

// string orb1afile = 12;
void JobOutput::clear_orb1afile() {
  orb1afile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobOutput::orb1afile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb1afile)
  return orb1afile_.GetNoArena();
}
void JobOutput::set_orb1afile(const ::std::string& value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb1afile)
}
#if LANG_CXX11
void JobOutput::set_orb1afile(::std::string&& value) {
  
  orb1afile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.orb1afile)
}
#endif
void JobOutput::set_orb1afile(const char* value) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.orb1afile)
}
void JobOutput::set_orb1afile(const char* value, size_t size) {
  
  orb1afile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.orb1afile)
}
::std::string* JobOutput::mutable_orb1afile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.orb1afile)
  return orb1afile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobOutput::release_orb1afile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.orb1afile)
  
  return orb1afile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobOutput::set_allocated_orb1afile(::std::string* orb1afile) {
  if (orb1afile != NULL) {
    
  } else {
    
  }
  orb1afile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1afile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.orb1afile)
}

// string orb1bfile = 13;
void JobOutput::clear_orb1bfile() {
  orb1bfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobOutput::orb1bfile() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb1bfile)
  return orb1bfile_.GetNoArena();
}
void JobOutput::set_orb1bfile(const ::std::string& value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb1bfile)
}
#if LANG_CXX11
void JobOutput::set_orb1bfile(::std::string&& value) {
  
  orb1bfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.orb1bfile)
}
#endif
void JobOutput::set_orb1bfile(const char* value) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.orb1bfile)
}
void JobOutput::set_orb1bfile(const char* value, size_t size) {
  
  orb1bfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.orb1bfile)
}
::std::string* JobOutput::mutable_orb1bfile() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.orb1bfile)
  return orb1bfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobOutput::release_orb1bfile() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.orb1bfile)
  
  return orb1bfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobOutput::set_allocated_orb1bfile(::std::string* orb1bfile) {
  if (orb1bfile != NULL) {
    
  } else {
    
  }
  orb1bfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orb1bfile);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.orb1bfile)
}

// int32 orb_size = 14;
void JobOutput::clear_orb_size() {
  orb_size_ = 0;
}
::google::protobuf::int32 JobOutput::orb_size() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orb_size)
  return orb_size_;
}
void JobOutput::set_orb_size(::google::protobuf::int32 value) {
  
  orb_size_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orb_size)
}

// repeated double orba_energies = 25;
int JobOutput::orba_energies_size() const {
  return orba_energies_.size();
}
void JobOutput::clear_orba_energies() {
  orba_energies_.Clear();
}
double JobOutput::orba_energies(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orba_energies)
  return orba_energies_.Get(index);
}
void JobOutput::set_orba_energies(int index, double value) {
  orba_energies_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orba_energies)
}
void JobOutput::add_orba_energies(double value) {
  orba_energies_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orba_energies)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::orba_energies() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orba_energies)
  return orba_energies_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orba_energies() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orba_energies)
  return &orba_energies_;
}

// repeated double orbb_energies = 26;
int JobOutput::orbb_energies_size() const {
  return orbb_energies_.size();
}
void JobOutput::clear_orbb_energies() {
  orbb_energies_.Clear();
}
double JobOutput::orbb_energies(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orbb_energies)
  return orbb_energies_.Get(index);
}
void JobOutput::set_orbb_energies(int index, double value) {
  orbb_energies_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orbb_energies)
}
void JobOutput::add_orbb_energies(double value) {
  orbb_energies_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orbb_energies)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::orbb_energies() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orbb_energies)
  return orbb_energies_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orbb_energies() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orbb_energies)
  return &orbb_energies_;
}

// repeated double orba_occupations = 27;
int JobOutput::orba_occupations_size() const {
  return orba_occupations_.size();
}
void JobOutput::clear_orba_occupations() {
  orba_occupations_.Clear();
}
double JobOutput::orba_occupations(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orba_occupations)
  return orba_occupations_.Get(index);
}
void JobOutput::set_orba_occupations(int index, double value) {
  orba_occupations_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orba_occupations)
}
void JobOutput::add_orba_occupations(double value) {
  orba_occupations_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orba_occupations)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::orba_occupations() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orba_occupations)
  return orba_occupations_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orba_occupations() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orba_occupations)
  return &orba_occupations_;
}

// repeated double orbb_occupations = 28;
int JobOutput::orbb_occupations_size() const {
  return orbb_occupations_.size();
}
void JobOutput::clear_orbb_occupations() {
  orbb_occupations_.Clear();
}
double JobOutput::orbb_occupations(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.orbb_occupations)
  return orbb_occupations_.Get(index);
}
void JobOutput::set_orbb_occupations(int index, double value) {
  orbb_occupations_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.orbb_occupations)
}
void JobOutput::add_orbb_occupations(double value) {
  orbb_occupations_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.orbb_occupations)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::orbb_occupations() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.orbb_occupations)
  return orbb_occupations_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_orbb_occupations() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.orbb_occupations)
  return &orbb_occupations_;
}

// string job_dir = 9;
void JobOutput::clear_job_dir() {
  job_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobOutput::job_dir() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.job_dir)
  return job_dir_.GetNoArena();
}
void JobOutput::set_job_dir(const ::std::string& value) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.job_dir)
}
#if LANG_CXX11
void JobOutput::set_job_dir(::std::string&& value) {
  
  job_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.job_dir)
}
#endif
void JobOutput::set_job_dir(const char* value) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.job_dir)
}
void JobOutput::set_job_dir(const char* value, size_t size) {
  
  job_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.job_dir)
}
::std::string* JobOutput::mutable_job_dir() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.job_dir)
  return job_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobOutput::release_job_dir() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.job_dir)
  
  return job_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobOutput::set_allocated_job_dir(::std::string* job_dir) {
  if (job_dir != NULL) {
    
  } else {
    
  }
  job_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_dir);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.job_dir)
}

// string job_scr_dir = 10;
void JobOutput::clear_job_scr_dir() {
  job_scr_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobOutput::job_scr_dir() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.job_scr_dir)
  return job_scr_dir_.GetNoArena();
}
void JobOutput::set_job_scr_dir(const ::std::string& value) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.job_scr_dir)
}
#if LANG_CXX11
void JobOutput::set_job_scr_dir(::std::string&& value) {
  
  job_scr_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:terachem_server.JobOutput.job_scr_dir)
}
#endif
void JobOutput::set_job_scr_dir(const char* value) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:terachem_server.JobOutput.job_scr_dir)
}
void JobOutput::set_job_scr_dir(const char* value, size_t size) {
  
  job_scr_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:terachem_server.JobOutput.job_scr_dir)
}
::std::string* JobOutput::mutable_job_scr_dir() {
  
  // @@protoc_insertion_point(field_mutable:terachem_server.JobOutput.job_scr_dir)
  return job_scr_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobOutput::release_job_scr_dir() {
  // @@protoc_insertion_point(field_release:terachem_server.JobOutput.job_scr_dir)
  
  return job_scr_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobOutput::set_allocated_job_scr_dir(::std::string* job_scr_dir) {
  if (job_scr_dir != NULL) {
    
  } else {
    
  }
  job_scr_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_scr_dir);
  // @@protoc_insertion_point(field_set_allocated:terachem_server.JobOutput.job_scr_dir)
}

// int32 server_job_id = 11;
void JobOutput::clear_server_job_id() {
  server_job_id_ = 0;
}
::google::protobuf::int32 JobOutput::server_job_id() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.server_job_id)
  return server_job_id_;
}
void JobOutput::set_server_job_id(::google::protobuf::int32 value) {
  
  server_job_id_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.server_job_id)
}

// repeated double nacme = 21;
int JobOutput::nacme_size() const {
  return nacme_.size();
}
void JobOutput::clear_nacme() {
  nacme_.Clear();
}
double JobOutput::nacme(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.nacme)
  return nacme_.Get(index);
}
void JobOutput::set_nacme(int index, double value) {
  nacme_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.nacme)
}
void JobOutput::add_nacme(double value) {
  nacme_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.nacme)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::nacme() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.nacme)
  return nacme_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_nacme() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.nacme)
  return &nacme_;
}

// repeated double ci_overlaps = 17;
int JobOutput::ci_overlaps_size() const {
  return ci_overlaps_.size();
}
void JobOutput::clear_ci_overlaps() {
  ci_overlaps_.Clear();
}
double JobOutput::ci_overlaps(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.ci_overlaps)
  return ci_overlaps_.Get(index);
}
void JobOutput::set_ci_overlaps(int index, double value) {
  ci_overlaps_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.ci_overlaps)
}
void JobOutput::add_ci_overlaps(double value) {
  ci_overlaps_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.ci_overlaps)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::ci_overlaps() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.ci_overlaps)
  return ci_overlaps_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_ci_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.ci_overlaps)
  return &ci_overlaps_;
}

// int32 ci_overlap_size = 18;
void JobOutput::clear_ci_overlap_size() {
  ci_overlap_size_ = 0;
}
::google::protobuf::int32 JobOutput::ci_overlap_size() const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.ci_overlap_size)
  return ci_overlap_size_;
}
void JobOutput::set_ci_overlap_size(::google::protobuf::int32 value) {
  
  ci_overlap_size_ = value;
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.ci_overlap_size)
}

// repeated int32 cas_energy_states = 19;
int JobOutput::cas_energy_states_size() const {
  return cas_energy_states_.size();
}
void JobOutput::clear_cas_energy_states() {
  cas_energy_states_.Clear();
}
::google::protobuf::int32 JobOutput::cas_energy_states(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_energy_states)
  return cas_energy_states_.Get(index);
}
void JobOutput::set_cas_energy_states(int index, ::google::protobuf::int32 value) {
  cas_energy_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_energy_states)
}
void JobOutput::add_cas_energy_states(::google::protobuf::int32 value) {
  cas_energy_states_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_energy_states)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JobOutput::cas_energy_states() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_energy_states)
  return cas_energy_states_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JobOutput::mutable_cas_energy_states() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_energy_states)
  return &cas_energy_states_;
}

// repeated int32 cas_energy_mults = 20;
int JobOutput::cas_energy_mults_size() const {
  return cas_energy_mults_.size();
}
void JobOutput::clear_cas_energy_mults() {
  cas_energy_mults_.Clear();
}
::google::protobuf::int32 JobOutput::cas_energy_mults(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_energy_mults)
  return cas_energy_mults_.Get(index);
}
void JobOutput::set_cas_energy_mults(int index, ::google::protobuf::int32 value) {
  cas_energy_mults_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_energy_mults)
}
void JobOutput::add_cas_energy_mults(::google::protobuf::int32 value) {
  cas_energy_mults_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_energy_mults)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JobOutput::cas_energy_mults() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_energy_mults)
  return cas_energy_mults_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JobOutput::mutable_cas_energy_mults() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_energy_mults)
  return &cas_energy_mults_;
}

// repeated double cas_transition_dipole = 22;
int JobOutput::cas_transition_dipole_size() const {
  return cas_transition_dipole_.size();
}
void JobOutput::clear_cas_transition_dipole() {
  cas_transition_dipole_.Clear();
}
double JobOutput::cas_transition_dipole(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.cas_transition_dipole)
  return cas_transition_dipole_.Get(index);
}
void JobOutput::set_cas_transition_dipole(int index, double value) {
  cas_transition_dipole_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.cas_transition_dipole)
}
void JobOutput::add_cas_transition_dipole(double value) {
  cas_transition_dipole_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.cas_transition_dipole)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::cas_transition_dipole() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.cas_transition_dipole)
  return cas_transition_dipole_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_cas_transition_dipole() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.cas_transition_dipole)
  return &cas_transition_dipole_;
}

// repeated double bond_order = 16;
int JobOutput::bond_order_size() const {
  return bond_order_.size();
}
void JobOutput::clear_bond_order() {
  bond_order_.Clear();
}
double JobOutput::bond_order(int index) const {
  // @@protoc_insertion_point(field_get:terachem_server.JobOutput.bond_order)
  return bond_order_.Get(index);
}
void JobOutput::set_bond_order(int index, double value) {
  bond_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:terachem_server.JobOutput.bond_order)
}
void JobOutput::add_bond_order(double value) {
  bond_order_.Add(value);
  // @@protoc_insertion_point(field_add:terachem_server.JobOutput.bond_order)
}
const ::google::protobuf::RepeatedField< double >&
JobOutput::bond_order() const {
  // @@protoc_insertion_point(field_list:terachem_server.JobOutput.bond_order)
  return bond_order_;
}
::google::protobuf::RepeatedField< double >*
JobOutput::mutable_bond_order() {
  // @@protoc_insertion_point(field_mutable_list:terachem_server.JobOutput.bond_order)
  return &bond_order_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace terachem_server

// @@protoc_insertion_point(global_scope)
