void logNode() {
    echo "INFO: This stage run on agent ${env.NODE_NAME}"
}

pipeline {
    agent any

    stage("Merge the target branch into this branch") {
        agent any
        // when {
        //     expression { (thisBuild.doBuild || thisBuild.doDocBuild) && isMergeRequest() }
        //     beforeAgent true
        // }

        steps {
            script {
                logNode()
                echo "GIT_AUTHOR_NAME = ${env.GIT_AUTHOR_NAME}"
                echo "GIT_AUTHOR_EMAIL = ${env.GIT_AUTHOR_EMAIL}"
                echo "GIT_BRANCH = ${env.GIT_BRANCH}"
                // Map mergeResults = git.merge(
                //     currentBranch: env.gitlabSourceBranch,
                //     targetBranch: env.gitlabTargetBranch,
                //     gitCredentialsId: 'cea29049-dce3-4a9f-b2cc-7ad22f5c069a',
                //     push: true,
                // )

                // if (!mergeResults.succeeded) {
                //     gitlab.mergeRequestComment(
                //         message: "Hi @${env.MR_AUTHOR}!\n\nI wasn't able to merge the target branch ${env.gitlabTargetBranch} " +
                //                  "into this source branch ${env.gitlabSourceBranch} (error was ${mergeResults.errors}), " +
                //                  "so I'm quitting CI ${env.BUILD_ID} with an error. Please make sure you merge the target branch " +
                //                  "and push to update your merge request." +
                //                  "\n\n" +
                //                  "If for some reason you really want to build this branch before merging, you can use the branch-" +
                //                  "specific build job at https://jenkins.jasonswails.com/job/AmberGitlab/job/amber-branch-tester/",
                //         projectId: env.gitlabMergeRequestTargetProjectId,
                //         mergeRequestId: env.gitlabMergeRequestIid,
                //     )
                //     error('Target branch merge failed')
                // } else if (mergeResults.changesMade) {
                //     gitlab.mergeRequestComment(
                //         message: "Hi @${env.MR_AUTHOR}!\n\nI see you raised a merge request to ${env.gitlabTargetBranch}, so I " +
                //                  "took the liberty of merging it into your branch ${env.gitlabSourceBranch} since it was out-of-date. " +
                //                  "\nI am aborting CI ${env.BUILD_ID} because another one will be triggered following my merge. " +
                //                  "\nPlease make sure to run a `git pull` to update your local branch with the results of my merge!",
                //         projectId: env.gitlabMergeRequestTargetProjectId,
                //         mergeRequestId: env.gitlabMergeRequestIid,
                //     )
                //     currentBuild.result = 'ABORTED'
                //     error('Quitting CI ${env.BUILD_ID} following a successful merge-and-push. A new build will have been triggered')
                // } else {
                //     echo "INFO: ${env.gitlabSourceBranch} was up-to-date! Well done!"
                // }
            }
        }
    }

    stage('build') {
        agent {
            docker {
                image 'henryw7/terachem_compilation_enviroment:0.0.1'
                alwaysPull true
            }
        }
        steps {
            echo 'Building TCPB-cpp...'
            sh './configure gnu'
            sh 'make install'
            echo 'Done building TCPB-cpp'
        }
    }
}